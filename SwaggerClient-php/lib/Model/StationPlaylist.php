<?php
/**
 * StationPlaylist
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * OpenAPI spec version: 0.17.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * StationPlaylist Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StationPlaylist extends HasAutoIncrementId 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StationPlaylist';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'type' => 'string',
'source' => 'string',
'order' => 'string',
'remote_url' => 'string',
'remote_type' => 'string',
'remote_buffer' => 'int',
'is_enabled' => 'bool',
'is_jingle' => 'bool',
'play_per_songs' => 'int',
'play_per_minutes' => 'int',
'play_per_hour_minute' => 'int',
'weight' => 'int',
'include_in_requests' => 'bool',
'include_in_on_demand' => 'bool',
'backend_options' => 'string',
'avoid_duplicates' => 'bool',
'schedule_items' => 'null[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'type' => null,
'source' => null,
'order' => null,
'remote_url' => null,
'remote_type' => null,
'remote_buffer' => null,
'is_enabled' => null,
'is_jingle' => null,
'play_per_songs' => null,
'play_per_minutes' => null,
'play_per_hour_minute' => null,
'weight' => null,
'include_in_requests' => null,
'include_in_on_demand' => null,
'backend_options' => null,
'avoid_duplicates' => null,
'schedule_items' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'type' => 'type',
'source' => 'source',
'order' => 'order',
'remote_url' => 'remote_url',
'remote_type' => 'remote_type',
'remote_buffer' => 'remote_buffer',
'is_enabled' => 'is_enabled',
'is_jingle' => 'is_jingle',
'play_per_songs' => 'play_per_songs',
'play_per_minutes' => 'play_per_minutes',
'play_per_hour_minute' => 'play_per_hour_minute',
'weight' => 'weight',
'include_in_requests' => 'include_in_requests',
'include_in_on_demand' => 'include_in_on_demand',
'backend_options' => 'backend_options',
'avoid_duplicates' => 'avoid_duplicates',
'schedule_items' => 'schedule_items'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'type' => 'setType',
'source' => 'setSource',
'order' => 'setOrder',
'remote_url' => 'setRemoteUrl',
'remote_type' => 'setRemoteType',
'remote_buffer' => 'setRemoteBuffer',
'is_enabled' => 'setIsEnabled',
'is_jingle' => 'setIsJingle',
'play_per_songs' => 'setPlayPerSongs',
'play_per_minutes' => 'setPlayPerMinutes',
'play_per_hour_minute' => 'setPlayPerHourMinute',
'weight' => 'setWeight',
'include_in_requests' => 'setIncludeInRequests',
'include_in_on_demand' => 'setIncludeInOnDemand',
'backend_options' => 'setBackendOptions',
'avoid_duplicates' => 'setAvoidDuplicates',
'schedule_items' => 'setScheduleItems'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'type' => 'getType',
'source' => 'getSource',
'order' => 'getOrder',
'remote_url' => 'getRemoteUrl',
'remote_type' => 'getRemoteType',
'remote_buffer' => 'getRemoteBuffer',
'is_enabled' => 'getIsEnabled',
'is_jingle' => 'getIsJingle',
'play_per_songs' => 'getPlayPerSongs',
'play_per_minutes' => 'getPlayPerMinutes',
'play_per_hour_minute' => 'getPlayPerHourMinute',
'weight' => 'getWeight',
'include_in_requests' => 'getIncludeInRequests',
'include_in_on_demand' => 'getIncludeInOnDemand',
'backend_options' => 'getBackendOptions',
'avoid_duplicates' => 'getAvoidDuplicates',
'schedule_items' => 'getScheduleItems'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['source'] = isset($data['source']) ? $data['source'] : null;
        $this->container['order'] = isset($data['order']) ? $data['order'] : null;
        $this->container['remote_url'] = isset($data['remote_url']) ? $data['remote_url'] : null;
        $this->container['remote_type'] = isset($data['remote_type']) ? $data['remote_type'] : null;
        $this->container['remote_buffer'] = isset($data['remote_buffer']) ? $data['remote_buffer'] : null;
        $this->container['is_enabled'] = isset($data['is_enabled']) ? $data['is_enabled'] : null;
        $this->container['is_jingle'] = isset($data['is_jingle']) ? $data['is_jingle'] : null;
        $this->container['play_per_songs'] = isset($data['play_per_songs']) ? $data['play_per_songs'] : null;
        $this->container['play_per_minutes'] = isset($data['play_per_minutes']) ? $data['play_per_minutes'] : null;
        $this->container['play_per_hour_minute'] = isset($data['play_per_hour_minute']) ? $data['play_per_hour_minute'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['include_in_requests'] = isset($data['include_in_requests']) ? $data['include_in_requests'] : null;
        $this->container['include_in_on_demand'] = isset($data['include_in_on_demand']) ? $data['include_in_on_demand'] : null;
        $this->container['backend_options'] = isset($data['backend_options']) ? $data['backend_options'] : null;
        $this->container['avoid_duplicates'] = isset($data['avoid_duplicates']) ? $data['avoid_duplicates'] : null;
        $this->container['schedule_items'] = isset($data['schedule_items']) ? $data['schedule_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets source
     *
     * @return string
     */
    public function getSource()
    {
        return $this->container['source'];
    }

    /**
     * Sets source
     *
     * @param string $source source
     *
     * @return $this
     */
    public function setSource($source)
    {
        $this->container['source'] = $source;

        return $this;
    }

    /**
     * Gets order
     *
     * @return string
     */
    public function getOrder()
    {
        return $this->container['order'];
    }

    /**
     * Sets order
     *
     * @param string $order order
     *
     * @return $this
     */
    public function setOrder($order)
    {
        $this->container['order'] = $order;

        return $this;
    }

    /**
     * Gets remote_url
     *
     * @return string
     */
    public function getRemoteUrl()
    {
        return $this->container['remote_url'];
    }

    /**
     * Sets remote_url
     *
     * @param string $remote_url remote_url
     *
     * @return $this
     */
    public function setRemoteUrl($remote_url)
    {
        $this->container['remote_url'] = $remote_url;

        return $this;
    }

    /**
     * Gets remote_type
     *
     * @return string
     */
    public function getRemoteType()
    {
        return $this->container['remote_type'];
    }

    /**
     * Sets remote_type
     *
     * @param string $remote_type remote_type
     *
     * @return $this
     */
    public function setRemoteType($remote_type)
    {
        $this->container['remote_type'] = $remote_type;

        return $this;
    }

    /**
     * Gets remote_buffer
     *
     * @return int
     */
    public function getRemoteBuffer()
    {
        return $this->container['remote_buffer'];
    }

    /**
     * Sets remote_buffer
     *
     * @param int $remote_buffer The total time (in seconds) that Liquidsoap should buffer remote URL streams.
     *
     * @return $this
     */
    public function setRemoteBuffer($remote_buffer)
    {
        $this->container['remote_buffer'] = $remote_buffer;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool $is_enabled is_enabled
     *
     * @return $this
     */
    public function setIsEnabled($is_enabled)
    {
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets is_jingle
     *
     * @return bool
     */
    public function getIsJingle()
    {
        return $this->container['is_jingle'];
    }

    /**
     * Sets is_jingle
     *
     * @param bool $is_jingle If yes, do not send jingle metadata to AutoDJ or trigger web hooks.
     *
     * @return $this
     */
    public function setIsJingle($is_jingle)
    {
        $this->container['is_jingle'] = $is_jingle;

        return $this;
    }

    /**
     * Gets play_per_songs
     *
     * @return int
     */
    public function getPlayPerSongs()
    {
        return $this->container['play_per_songs'];
    }

    /**
     * Sets play_per_songs
     *
     * @param int $play_per_songs play_per_songs
     *
     * @return $this
     */
    public function setPlayPerSongs($play_per_songs)
    {
        $this->container['play_per_songs'] = $play_per_songs;

        return $this;
    }

    /**
     * Gets play_per_minutes
     *
     * @return int
     */
    public function getPlayPerMinutes()
    {
        return $this->container['play_per_minutes'];
    }

    /**
     * Sets play_per_minutes
     *
     * @param int $play_per_minutes play_per_minutes
     *
     * @return $this
     */
    public function setPlayPerMinutes($play_per_minutes)
    {
        $this->container['play_per_minutes'] = $play_per_minutes;

        return $this;
    }

    /**
     * Gets play_per_hour_minute
     *
     * @return int
     */
    public function getPlayPerHourMinute()
    {
        return $this->container['play_per_hour_minute'];
    }

    /**
     * Sets play_per_hour_minute
     *
     * @param int $play_per_hour_minute play_per_hour_minute
     *
     * @return $this
     */
    public function setPlayPerHourMinute($play_per_hour_minute)
    {
        $this->container['play_per_hour_minute'] = $play_per_hour_minute;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets include_in_requests
     *
     * @return bool
     */
    public function getIncludeInRequests()
    {
        return $this->container['include_in_requests'];
    }

    /**
     * Sets include_in_requests
     *
     * @param bool $include_in_requests include_in_requests
     *
     * @return $this
     */
    public function setIncludeInRequests($include_in_requests)
    {
        $this->container['include_in_requests'] = $include_in_requests;

        return $this;
    }

    /**
     * Gets include_in_on_demand
     *
     * @return bool
     */
    public function getIncludeInOnDemand()
    {
        return $this->container['include_in_on_demand'];
    }

    /**
     * Sets include_in_on_demand
     *
     * @param bool $include_in_on_demand Whether this playlist's media is included in 'on demand' download/streaming if enabled.
     *
     * @return $this
     */
    public function setIncludeInOnDemand($include_in_on_demand)
    {
        $this->container['include_in_on_demand'] = $include_in_on_demand;

        return $this;
    }

    /**
     * Gets backend_options
     *
     * @return string
     */
    public function getBackendOptions()
    {
        return $this->container['backend_options'];
    }

    /**
     * Sets backend_options
     *
     * @param string $backend_options backend_options
     *
     * @return $this
     */
    public function setBackendOptions($backend_options)
    {
        $this->container['backend_options'] = $backend_options;

        return $this;
    }

    /**
     * Gets avoid_duplicates
     *
     * @return bool
     */
    public function getAvoidDuplicates()
    {
        return $this->container['avoid_duplicates'];
    }

    /**
     * Sets avoid_duplicates
     *
     * @param bool $avoid_duplicates avoid_duplicates
     *
     * @return $this
     */
    public function setAvoidDuplicates($avoid_duplicates)
    {
        $this->container['avoid_duplicates'] = $avoid_duplicates;

        return $this;
    }

    /**
     * Gets schedule_items
     *
     * @return null[]
     */
    public function getScheduleItems()
    {
        return $this->container['schedule_items'];
    }

    /**
     * Sets schedule_items
     *
     * @param null[] $schedule_items StationSchedule> *_/
     *
     * @return $this
     */
    public function setScheduleItems($schedule_items)
    {
        $this->container['schedule_items'] = $schedule_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
