<?php
/**
 * Station
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * OpenAPI spec version: 0.17.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * Station Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Station extends HasAutoIncrementId 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Station';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'short_name' => 'string',
'is_enabled' => 'bool',
'frontend_type' => 'string',
'frontend_config' => 'null[]',
'backend_type' => 'string',
'backend_config' => 'null[]',
'description' => 'string',
'url' => 'string',
'genre' => 'string',
'radio_base_dir' => 'string',
'enable_requests' => 'bool',
'request_delay' => 'int',
'request_threshold' => 'int',
'disconnect_deactivate_streamer' => 'int',
'enable_streamers' => 'bool',
'is_streamer_live' => 'bool',
'enable_public_page' => 'bool',
'enable_on_demand' => 'bool',
'enable_on_demand_download' => 'bool',
'enable_hls' => 'bool',
'api_history_items' => 'int',
'timezone' => 'string',
'default_album_art_url' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'short_name' => null,
'is_enabled' => null,
'frontend_type' => null,
'frontend_config' => null,
'backend_type' => null,
'backend_config' => null,
'description' => null,
'url' => null,
'genre' => null,
'radio_base_dir' => null,
'enable_requests' => null,
'request_delay' => null,
'request_threshold' => null,
'disconnect_deactivate_streamer' => null,
'enable_streamers' => null,
'is_streamer_live' => null,
'enable_public_page' => null,
'enable_on_demand' => null,
'enable_on_demand_download' => null,
'enable_hls' => null,
'api_history_items' => null,
'timezone' => null,
'default_album_art_url' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'short_name' => 'short_name',
'is_enabled' => 'is_enabled',
'frontend_type' => 'frontend_type',
'frontend_config' => 'frontend_config',
'backend_type' => 'backend_type',
'backend_config' => 'backend_config',
'description' => 'description',
'url' => 'url',
'genre' => 'genre',
'radio_base_dir' => 'radio_base_dir',
'enable_requests' => 'enable_requests',
'request_delay' => 'request_delay',
'request_threshold' => 'request_threshold',
'disconnect_deactivate_streamer' => 'disconnect_deactivate_streamer',
'enable_streamers' => 'enable_streamers',
'is_streamer_live' => 'is_streamer_live',
'enable_public_page' => 'enable_public_page',
'enable_on_demand' => 'enable_on_demand',
'enable_on_demand_download' => 'enable_on_demand_download',
'enable_hls' => 'enable_hls',
'api_history_items' => 'api_history_items',
'timezone' => 'timezone',
'default_album_art_url' => 'default_album_art_url'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'short_name' => 'setShortName',
'is_enabled' => 'setIsEnabled',
'frontend_type' => 'setFrontendType',
'frontend_config' => 'setFrontendConfig',
'backend_type' => 'setBackendType',
'backend_config' => 'setBackendConfig',
'description' => 'setDescription',
'url' => 'setUrl',
'genre' => 'setGenre',
'radio_base_dir' => 'setRadioBaseDir',
'enable_requests' => 'setEnableRequests',
'request_delay' => 'setRequestDelay',
'request_threshold' => 'setRequestThreshold',
'disconnect_deactivate_streamer' => 'setDisconnectDeactivateStreamer',
'enable_streamers' => 'setEnableStreamers',
'is_streamer_live' => 'setIsStreamerLive',
'enable_public_page' => 'setEnablePublicPage',
'enable_on_demand' => 'setEnableOnDemand',
'enable_on_demand_download' => 'setEnableOnDemandDownload',
'enable_hls' => 'setEnableHls',
'api_history_items' => 'setApiHistoryItems',
'timezone' => 'setTimezone',
'default_album_art_url' => 'setDefaultAlbumArtUrl'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'short_name' => 'getShortName',
'is_enabled' => 'getIsEnabled',
'frontend_type' => 'getFrontendType',
'frontend_config' => 'getFrontendConfig',
'backend_type' => 'getBackendType',
'backend_config' => 'getBackendConfig',
'description' => 'getDescription',
'url' => 'getUrl',
'genre' => 'getGenre',
'radio_base_dir' => 'getRadioBaseDir',
'enable_requests' => 'getEnableRequests',
'request_delay' => 'getRequestDelay',
'request_threshold' => 'getRequestThreshold',
'disconnect_deactivate_streamer' => 'getDisconnectDeactivateStreamer',
'enable_streamers' => 'getEnableStreamers',
'is_streamer_live' => 'getIsStreamerLive',
'enable_public_page' => 'getEnablePublicPage',
'enable_on_demand' => 'getEnableOnDemand',
'enable_on_demand_download' => 'getEnableOnDemandDownload',
'enable_hls' => 'getEnableHls',
'api_history_items' => 'getApiHistoryItems',
'timezone' => 'getTimezone',
'default_album_art_url' => 'getDefaultAlbumArtUrl'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['short_name'] = isset($data['short_name']) ? $data['short_name'] : null;
        $this->container['is_enabled'] = isset($data['is_enabled']) ? $data['is_enabled'] : null;
        $this->container['frontend_type'] = isset($data['frontend_type']) ? $data['frontend_type'] : null;
        $this->container['frontend_config'] = isset($data['frontend_config']) ? $data['frontend_config'] : null;
        $this->container['backend_type'] = isset($data['backend_type']) ? $data['backend_type'] : null;
        $this->container['backend_config'] = isset($data['backend_config']) ? $data['backend_config'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['genre'] = isset($data['genre']) ? $data['genre'] : null;
        $this->container['radio_base_dir'] = isset($data['radio_base_dir']) ? $data['radio_base_dir'] : null;
        $this->container['enable_requests'] = isset($data['enable_requests']) ? $data['enable_requests'] : null;
        $this->container['request_delay'] = isset($data['request_delay']) ? $data['request_delay'] : null;
        $this->container['request_threshold'] = isset($data['request_threshold']) ? $data['request_threshold'] : null;
        $this->container['disconnect_deactivate_streamer'] = isset($data['disconnect_deactivate_streamer']) ? $data['disconnect_deactivate_streamer'] : null;
        $this->container['enable_streamers'] = isset($data['enable_streamers']) ? $data['enable_streamers'] : null;
        $this->container['is_streamer_live'] = isset($data['is_streamer_live']) ? $data['is_streamer_live'] : null;
        $this->container['enable_public_page'] = isset($data['enable_public_page']) ? $data['enable_public_page'] : null;
        $this->container['enable_on_demand'] = isset($data['enable_on_demand']) ? $data['enable_on_demand'] : null;
        $this->container['enable_on_demand_download'] = isset($data['enable_on_demand_download']) ? $data['enable_on_demand_download'] : null;
        $this->container['enable_hls'] = isset($data['enable_hls']) ? $data['enable_hls'] : null;
        $this->container['api_history_items'] = isset($data['api_history_items']) ? $data['api_history_items'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['default_album_art_url'] = isset($data['default_album_art_url']) ? $data['default_album_art_url'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The full display name of the station.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string $short_name The URL-friendly name for the station, typically auto-generated from the full station name.
     *
     * @return $this
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets is_enabled
     *
     * @return bool
     */
    public function getIsEnabled()
    {
        return $this->container['is_enabled'];
    }

    /**
     * Sets is_enabled
     *
     * @param bool $is_enabled If set to 'false', prevents the station from broadcasting but leaves it in the database.
     *
     * @return $this
     */
    public function setIsEnabled($is_enabled)
    {
        $this->container['is_enabled'] = $is_enabled;

        return $this;
    }

    /**
     * Gets frontend_type
     *
     * @return string
     */
    public function getFrontendType()
    {
        return $this->container['frontend_type'];
    }

    /**
     * Sets frontend_type
     *
     * @param string $frontend_type The frontend adapter (icecast,shoutcast,remote,etc)
     *
     * @return $this
     */
    public function setFrontendType($frontend_type)
    {
        $this->container['frontend_type'] = $frontend_type;

        return $this;
    }

    /**
     * Gets frontend_config
     *
     * @return null[]
     */
    public function getFrontendConfig()
    {
        return $this->container['frontend_config'];
    }

    /**
     * Sets frontend_config
     *
     * @param null[] $frontend_config An array containing station-specific frontend configuration
     *
     * @return $this
     */
    public function setFrontendConfig($frontend_config)
    {
        $this->container['frontend_config'] = $frontend_config;

        return $this;
    }

    /**
     * Gets backend_type
     *
     * @return string
     */
    public function getBackendType()
    {
        return $this->container['backend_type'];
    }

    /**
     * Sets backend_type
     *
     * @param string $backend_type The backend adapter (liquidsoap,etc)
     *
     * @return $this
     */
    public function setBackendType($backend_type)
    {
        $this->container['backend_type'] = $backend_type;

        return $this;
    }

    /**
     * Gets backend_config
     *
     * @return null[]
     */
    public function getBackendConfig()
    {
        return $this->container['backend_config'];
    }

    /**
     * Sets backend_config
     *
     * @param null[] $backend_config An array containing station-specific backend configuration
     *
     * @return $this
     */
    public function setBackendConfig($backend_config)
    {
        $this->container['backend_config'] = $backend_config;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url url
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets genre
     *
     * @return string
     */
    public function getGenre()
    {
        return $this->container['genre'];
    }

    /**
     * Sets genre
     *
     * @param string $genre genre
     *
     * @return $this
     */
    public function setGenre($genre)
    {
        $this->container['genre'] = $genre;

        return $this;
    }

    /**
     * Gets radio_base_dir
     *
     * @return string
     */
    public function getRadioBaseDir()
    {
        return $this->container['radio_base_dir'];
    }

    /**
     * Sets radio_base_dir
     *
     * @param string $radio_base_dir radio_base_dir
     *
     * @return $this
     */
    public function setRadioBaseDir($radio_base_dir)
    {
        $this->container['radio_base_dir'] = $radio_base_dir;

        return $this;
    }

    /**
     * Gets enable_requests
     *
     * @return bool
     */
    public function getEnableRequests()
    {
        return $this->container['enable_requests'];
    }

    /**
     * Sets enable_requests
     *
     * @param bool $enable_requests Whether listeners can request songs to play on this station.
     *
     * @return $this
     */
    public function setEnableRequests($enable_requests)
    {
        $this->container['enable_requests'] = $enable_requests;

        return $this;
    }

    /**
     * Gets request_delay
     *
     * @return int
     */
    public function getRequestDelay()
    {
        return $this->container['request_delay'];
    }

    /**
     * Sets request_delay
     *
     * @param int $request_delay request_delay
     *
     * @return $this
     */
    public function setRequestDelay($request_delay)
    {
        $this->container['request_delay'] = $request_delay;

        return $this;
    }

    /**
     * Gets request_threshold
     *
     * @return int
     */
    public function getRequestThreshold()
    {
        return $this->container['request_threshold'];
    }

    /**
     * Sets request_threshold
     *
     * @param int $request_threshold request_threshold
     *
     * @return $this
     */
    public function setRequestThreshold($request_threshold)
    {
        $this->container['request_threshold'] = $request_threshold;

        return $this;
    }

    /**
     * Gets disconnect_deactivate_streamer
     *
     * @return int
     */
    public function getDisconnectDeactivateStreamer()
    {
        return $this->container['disconnect_deactivate_streamer'];
    }

    /**
     * Sets disconnect_deactivate_streamer
     *
     * @param int $disconnect_deactivate_streamer disconnect_deactivate_streamer
     *
     * @return $this
     */
    public function setDisconnectDeactivateStreamer($disconnect_deactivate_streamer)
    {
        $this->container['disconnect_deactivate_streamer'] = $disconnect_deactivate_streamer;

        return $this;
    }

    /**
     * Gets enable_streamers
     *
     * @return bool
     */
    public function getEnableStreamers()
    {
        return $this->container['enable_streamers'];
    }

    /**
     * Sets enable_streamers
     *
     * @param bool $enable_streamers Whether streamers are allowed to broadcast to this station at all.
     *
     * @return $this
     */
    public function setEnableStreamers($enable_streamers)
    {
        $this->container['enable_streamers'] = $enable_streamers;

        return $this;
    }

    /**
     * Gets is_streamer_live
     *
     * @return bool
     */
    public function getIsStreamerLive()
    {
        return $this->container['is_streamer_live'];
    }

    /**
     * Sets is_streamer_live
     *
     * @param bool $is_streamer_live Whether a streamer is currently active on the station.
     *
     * @return $this
     */
    public function setIsStreamerLive($is_streamer_live)
    {
        $this->container['is_streamer_live'] = $is_streamer_live;

        return $this;
    }

    /**
     * Gets enable_public_page
     *
     * @return bool
     */
    public function getEnablePublicPage()
    {
        return $this->container['enable_public_page'];
    }

    /**
     * Sets enable_public_page
     *
     * @param bool $enable_public_page Whether this station is visible as a public page and in a now-playing API response.
     *
     * @return $this
     */
    public function setEnablePublicPage($enable_public_page)
    {
        $this->container['enable_public_page'] = $enable_public_page;

        return $this;
    }

    /**
     * Gets enable_on_demand
     *
     * @return bool
     */
    public function getEnableOnDemand()
    {
        return $this->container['enable_on_demand'];
    }

    /**
     * Sets enable_on_demand
     *
     * @param bool $enable_on_demand Whether this station has a public 'on-demand' streaming and download page.
     *
     * @return $this
     */
    public function setEnableOnDemand($enable_on_demand)
    {
        $this->container['enable_on_demand'] = $enable_on_demand;

        return $this;
    }

    /**
     * Gets enable_on_demand_download
     *
     * @return bool
     */
    public function getEnableOnDemandDownload()
    {
        return $this->container['enable_on_demand_download'];
    }

    /**
     * Sets enable_on_demand_download
     *
     * @param bool $enable_on_demand_download Whether the 'on-demand' page offers download capability.
     *
     * @return $this
     */
    public function setEnableOnDemandDownload($enable_on_demand_download)
    {
        $this->container['enable_on_demand_download'] = $enable_on_demand_download;

        return $this;
    }

    /**
     * Gets enable_hls
     *
     * @return bool
     */
    public function getEnableHls()
    {
        return $this->container['enable_hls'];
    }

    /**
     * Sets enable_hls
     *
     * @param bool $enable_hls Whether HLS streaming is enabled.
     *
     * @return $this
     */
    public function setEnableHls($enable_hls)
    {
        $this->container['enable_hls'] = $enable_hls;

        return $this;
    }

    /**
     * Gets api_history_items
     *
     * @return int
     */
    public function getApiHistoryItems()
    {
        return $this->container['api_history_items'];
    }

    /**
     * Sets api_history_items
     *
     * @param int $api_history_items The number of 'last played' history items to show for a station in API responses.
     *
     * @return $this
     */
    public function setApiHistoryItems($api_history_items)
    {
        $this->container['api_history_items'] = $api_history_items;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone The time zone that station operations should take place in.
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets default_album_art_url
     *
     * @return string
     */
    public function getDefaultAlbumArtUrl()
    {
        return $this->container['default_album_art_url'];
    }

    /**
     * Sets default_album_art_url
     *
     * @param string $default_album_art_url The station-specific default album artwork URL.
     *
     * @return $this
     */
    public function setDefaultAlbumArtUrl($default_album_art_url)
    {
        $this->container['default_album_art_url'] = $default_album_art_url;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
