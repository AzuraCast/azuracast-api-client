<?php
/**
 * ApiStationServiceStatus
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * OpenAPI spec version: 0.17.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ApiStationServiceStatus Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApiStationServiceStatus implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Api_StationServiceStatus';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'backend_running' => 'bool',
'frontend_running' => 'bool',
'station_has_started' => 'bool',
'station_needs_restart' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'backend_running' => null,
'frontend_running' => null,
'station_has_started' => null,
'station_needs_restart' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'backend_running' => 'backend_running',
'frontend_running' => 'frontend_running',
'station_has_started' => 'station_has_started',
'station_needs_restart' => 'station_needs_restart'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'backend_running' => 'setBackendRunning',
'frontend_running' => 'setFrontendRunning',
'station_has_started' => 'setStationHasStarted',
'station_needs_restart' => 'setStationNeedsRestart'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'backend_running' => 'getBackendRunning',
'frontend_running' => 'getFrontendRunning',
'station_has_started' => 'getStationHasStarted',
'station_needs_restart' => 'getStationNeedsRestart'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['backend_running'] = isset($data['backend_running']) ? $data['backend_running'] : null;
        $this->container['frontend_running'] = isset($data['frontend_running']) ? $data['frontend_running'] : null;
        $this->container['station_has_started'] = isset($data['station_has_started']) ? $data['station_has_started'] : null;
        $this->container['station_needs_restart'] = isset($data['station_needs_restart']) ? $data['station_needs_restart'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets backend_running
     *
     * @return bool
     */
    public function getBackendRunning()
    {
        return $this->container['backend_running'];
    }

    /**
     * Sets backend_running
     *
     * @param bool $backend_running backend_running
     *
     * @return $this
     */
    public function setBackendRunning($backend_running)
    {
        $this->container['backend_running'] = $backend_running;

        return $this;
    }

    /**
     * Gets frontend_running
     *
     * @return bool
     */
    public function getFrontendRunning()
    {
        return $this->container['frontend_running'];
    }

    /**
     * Sets frontend_running
     *
     * @param bool $frontend_running frontend_running
     *
     * @return $this
     */
    public function setFrontendRunning($frontend_running)
    {
        $this->container['frontend_running'] = $frontend_running;

        return $this;
    }

    /**
     * Gets station_has_started
     *
     * @return bool
     */
    public function getStationHasStarted()
    {
        return $this->container['station_has_started'];
    }

    /**
     * Sets station_has_started
     *
     * @param bool $station_has_started station_has_started
     *
     * @return $this
     */
    public function setStationHasStarted($station_has_started)
    {
        $this->container['station_has_started'] = $station_has_started;

        return $this;
    }

    /**
     * Gets station_needs_restart
     *
     * @return bool
     */
    public function getStationNeedsRestart()
    {
        return $this->container['station_needs_restart'];
    }

    /**
     * Sets station_needs_restart
     *
     * @param bool $station_needs_restart station_needs_restart
     *
     * @return $this
     */
    public function setStationNeedsRestart($station_needs_restart)
    {
        $this->container['station_needs_restart'] = $station_needs_restart;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
