<?php
/**
 * ApiNowPlayingStation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * OpenAPI spec version: 0.17.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ApiNowPlayingStation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApiNowPlayingStation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Api_NowPlaying_Station';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'name' => 'string',
'shortcode' => 'string',
'description' => 'string',
'frontend' => 'string',
'backend' => 'string',
'listen_url' => '',
'url' => 'string',
'public_player_url' => '',
'playlist_pls_url' => '',
'playlist_m3u_url' => '',
'is_public' => 'bool',
'mounts' => '\Swagger\Client\Model\ApiNowPlayingStationMount[]',
'remotes' => '\Swagger\Client\Model\ApiNowPlayingStationRemote[]',
'hls_enabled' => 'bool',
'hls_url' => '',
'hls_listeners' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'shortcode' => null,
'description' => null,
'frontend' => null,
'backend' => null,
'listen_url' => null,
'url' => null,
'public_player_url' => null,
'playlist_pls_url' => null,
'playlist_m3u_url' => null,
'is_public' => null,
'mounts' => null,
'remotes' => null,
'hls_enabled' => null,
'hls_url' => null,
'hls_listeners' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'shortcode' => 'shortcode',
'description' => 'description',
'frontend' => 'frontend',
'backend' => 'backend',
'listen_url' => 'listen_url',
'url' => 'url',
'public_player_url' => 'public_player_url',
'playlist_pls_url' => 'playlist_pls_url',
'playlist_m3u_url' => 'playlist_m3u_url',
'is_public' => 'is_public',
'mounts' => 'mounts',
'remotes' => 'remotes',
'hls_enabled' => 'hls_enabled',
'hls_url' => 'hls_url',
'hls_listeners' => 'hls_listeners'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'shortcode' => 'setShortcode',
'description' => 'setDescription',
'frontend' => 'setFrontend',
'backend' => 'setBackend',
'listen_url' => 'setListenUrl',
'url' => 'setUrl',
'public_player_url' => 'setPublicPlayerUrl',
'playlist_pls_url' => 'setPlaylistPlsUrl',
'playlist_m3u_url' => 'setPlaylistM3uUrl',
'is_public' => 'setIsPublic',
'mounts' => 'setMounts',
'remotes' => 'setRemotes',
'hls_enabled' => 'setHlsEnabled',
'hls_url' => 'setHlsUrl',
'hls_listeners' => 'setHlsListeners'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'shortcode' => 'getShortcode',
'description' => 'getDescription',
'frontend' => 'getFrontend',
'backend' => 'getBackend',
'listen_url' => 'getListenUrl',
'url' => 'getUrl',
'public_player_url' => 'getPublicPlayerUrl',
'playlist_pls_url' => 'getPlaylistPlsUrl',
'playlist_m3u_url' => 'getPlaylistM3uUrl',
'is_public' => 'getIsPublic',
'mounts' => 'getMounts',
'remotes' => 'getRemotes',
'hls_enabled' => 'getHlsEnabled',
'hls_url' => 'getHlsUrl',
'hls_listeners' => 'getHlsListeners'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['shortcode'] = isset($data['shortcode']) ? $data['shortcode'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['frontend'] = isset($data['frontend']) ? $data['frontend'] : null;
        $this->container['backend'] = isset($data['backend']) ? $data['backend'] : null;
        $this->container['listen_url'] = isset($data['listen_url']) ? $data['listen_url'] : null;
        $this->container['url'] = isset($data['url']) ? $data['url'] : null;
        $this->container['public_player_url'] = isset($data['public_player_url']) ? $data['public_player_url'] : null;
        $this->container['playlist_pls_url'] = isset($data['playlist_pls_url']) ? $data['playlist_pls_url'] : null;
        $this->container['playlist_m3u_url'] = isset($data['playlist_m3u_url']) ? $data['playlist_m3u_url'] : null;
        $this->container['is_public'] = isset($data['is_public']) ? $data['is_public'] : null;
        $this->container['mounts'] = isset($data['mounts']) ? $data['mounts'] : null;
        $this->container['remotes'] = isset($data['remotes']) ? $data['remotes'] : null;
        $this->container['hls_enabled'] = isset($data['hls_enabled']) ? $data['hls_enabled'] : null;
        $this->container['hls_url'] = isset($data['hls_url']) ? $data['hls_url'] : null;
        $this->container['hls_listeners'] = isset($data['hls_listeners']) ? $data['hls_listeners'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id Station ID
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Station name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets shortcode
     *
     * @return string
     */
    public function getShortcode()
    {
        return $this->container['shortcode'];
    }

    /**
     * Sets shortcode
     *
     * @param string $shortcode Station \"short code\", used for URL and folder paths
     *
     * @return $this
     */
    public function setShortcode($shortcode)
    {
        $this->container['shortcode'] = $shortcode;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description Station description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets frontend
     *
     * @return string
     */
    public function getFrontend()
    {
        return $this->container['frontend'];
    }

    /**
     * Sets frontend
     *
     * @param string $frontend Which broadcasting software (frontend) the station uses
     *
     * @return $this
     */
    public function setFrontend($frontend)
    {
        $this->container['frontend'] = $frontend;

        return $this;
    }

    /**
     * Gets backend
     *
     * @return string
     */
    public function getBackend()
    {
        return $this->container['backend'];
    }

    /**
     * Sets backend
     *
     * @param string $backend Which AutoDJ software (backend) the station uses
     *
     * @return $this
     */
    public function setBackend($backend)
    {
        $this->container['backend'] = $backend;

        return $this;
    }

    /**
     * Gets listen_url
     *
     * @return 
     */
    public function getListenUrl()
    {
        return $this->container['listen_url'];
    }

    /**
     * Sets listen_url
     *
     * @param  $listen_url The full URL to listen to the default mount of the station
     *
     * @return $this
     */
    public function setListenUrl($listen_url)
    {
        $this->container['listen_url'] = $listen_url;

        return $this;
    }

    /**
     * Gets url
     *
     * @return string
     */
    public function getUrl()
    {
        return $this->container['url'];
    }

    /**
     * Sets url
     *
     * @param string $url The public URL of the station.
     *
     * @return $this
     */
    public function setUrl($url)
    {
        $this->container['url'] = $url;

        return $this;
    }

    /**
     * Gets public_player_url
     *
     * @return 
     */
    public function getPublicPlayerUrl()
    {
        return $this->container['public_player_url'];
    }

    /**
     * Sets public_player_url
     *
     * @param  $public_player_url The public player URL for the station.
     *
     * @return $this
     */
    public function setPublicPlayerUrl($public_player_url)
    {
        $this->container['public_player_url'] = $public_player_url;

        return $this;
    }

    /**
     * Gets playlist_pls_url
     *
     * @return 
     */
    public function getPlaylistPlsUrl()
    {
        return $this->container['playlist_pls_url'];
    }

    /**
     * Sets playlist_pls_url
     *
     * @param  $playlist_pls_url The playlist download URL in PLS format.
     *
     * @return $this
     */
    public function setPlaylistPlsUrl($playlist_pls_url)
    {
        $this->container['playlist_pls_url'] = $playlist_pls_url;

        return $this;
    }

    /**
     * Gets playlist_m3u_url
     *
     * @return 
     */
    public function getPlaylistM3uUrl()
    {
        return $this->container['playlist_m3u_url'];
    }

    /**
     * Sets playlist_m3u_url
     *
     * @param  $playlist_m3u_url The playlist download URL in M3U format.
     *
     * @return $this
     */
    public function setPlaylistM3uUrl($playlist_m3u_url)
    {
        $this->container['playlist_m3u_url'] = $playlist_m3u_url;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool $is_public If the station is public (i.e. should be shown in listings of all stations)
     *
     * @return $this
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets mounts
     *
     * @return \Swagger\Client\Model\ApiNowPlayingStationMount[]
     */
    public function getMounts()
    {
        return $this->container['mounts'];
    }

    /**
     * Sets mounts
     *
     * @param \Swagger\Client\Model\ApiNowPlayingStationMount[] $mounts *_/
     *
     * @return $this
     */
    public function setMounts($mounts)
    {
        $this->container['mounts'] = $mounts;

        return $this;
    }

    /**
     * Gets remotes
     *
     * @return \Swagger\Client\Model\ApiNowPlayingStationRemote[]
     */
    public function getRemotes()
    {
        return $this->container['remotes'];
    }

    /**
     * Sets remotes
     *
     * @param \Swagger\Client\Model\ApiNowPlayingStationRemote[] $remotes *_/
     *
     * @return $this
     */
    public function setRemotes($remotes)
    {
        $this->container['remotes'] = $remotes;

        return $this;
    }

    /**
     * Gets hls_enabled
     *
     * @return bool
     */
    public function getHlsEnabled()
    {
        return $this->container['hls_enabled'];
    }

    /**
     * Sets hls_enabled
     *
     * @param bool $hls_enabled If the station has HLS streaming enabled.
     *
     * @return $this
     */
    public function setHlsEnabled($hls_enabled)
    {
        $this->container['hls_enabled'] = $hls_enabled;

        return $this;
    }

    /**
     * Gets hls_url
     *
     * @return 
     */
    public function getHlsUrl()
    {
        return $this->container['hls_url'];
    }

    /**
     * Sets hls_url
     *
     * @param  $hls_url The full URL to listen to the HLS stream for the station.
     *
     * @return $this
     */
    public function setHlsUrl($hls_url)
    {
        $this->container['hls_url'] = $hls_url;

        return $this;
    }

    /**
     * Gets hls_listeners
     *
     * @return int
     */
    public function getHlsListeners()
    {
        return $this->container['hls_listeners'];
    }

    /**
     * Sets hls_listeners
     *
     * @param int $hls_listeners HLS Listeners
     *
     * @return $this
     */
    public function setHlsListeners($hls_listeners)
    {
        $this->container['hls_listeners'] = $hls_listeners;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
