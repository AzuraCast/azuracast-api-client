<?php
/**
 * ApiNowPlaying
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * OpenAPI spec version: 0.17.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ApiNowPlaying Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApiNowPlaying implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Api_NowPlaying';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'station' => '\Swagger\Client\Model\ApiNowPlayingStation',
'listeners' => '\Swagger\Client\Model\ApiNowPlayingListeners',
'live' => '\Swagger\Client\Model\ApiNowPlayingLive',
'now_playing' => 'OneOfApiNowPlayingNowPlaying',
'playing_next' => 'OneOfApiNowPlayingPlayingNext',
'song_history' => '\Swagger\Client\Model\ApiNowPlayingSongHistory[]',
'is_online' => 'bool',
'cache' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'station' => null,
'listeners' => null,
'live' => null,
'now_playing' => null,
'playing_next' => null,
'song_history' => null,
'is_online' => null,
'cache' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'station' => 'station',
'listeners' => 'listeners',
'live' => 'live',
'now_playing' => 'now_playing',
'playing_next' => 'playing_next',
'song_history' => 'song_history',
'is_online' => 'is_online',
'cache' => 'cache'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'station' => 'setStation',
'listeners' => 'setListeners',
'live' => 'setLive',
'now_playing' => 'setNowPlaying',
'playing_next' => 'setPlayingNext',
'song_history' => 'setSongHistory',
'is_online' => 'setIsOnline',
'cache' => 'setCache'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'station' => 'getStation',
'listeners' => 'getListeners',
'live' => 'getLive',
'now_playing' => 'getNowPlaying',
'playing_next' => 'getPlayingNext',
'song_history' => 'getSongHistory',
'is_online' => 'getIsOnline',
'cache' => 'getCache'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CACHE_HIT = 'hit';
const CACHE_DATABASE = 'database';
const CACHE_STATION = 'station';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCacheAllowableValues()
    {
        return [
            self::CACHE_HIT,
self::CACHE_DATABASE,
self::CACHE_STATION,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['station'] = isset($data['station']) ? $data['station'] : null;
        $this->container['listeners'] = isset($data['listeners']) ? $data['listeners'] : null;
        $this->container['live'] = isset($data['live']) ? $data['live'] : null;
        $this->container['now_playing'] = isset($data['now_playing']) ? $data['now_playing'] : null;
        $this->container['playing_next'] = isset($data['playing_next']) ? $data['playing_next'] : null;
        $this->container['song_history'] = isset($data['song_history']) ? $data['song_history'] : null;
        $this->container['is_online'] = isset($data['is_online']) ? $data['is_online'] : null;
        $this->container['cache'] = isset($data['cache']) ? $data['cache'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCacheAllowableValues();
        if (!is_null($this->container['cache']) && !in_array($this->container['cache'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'cache', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets station
     *
     * @return \Swagger\Client\Model\ApiNowPlayingStation
     */
    public function getStation()
    {
        return $this->container['station'];
    }

    /**
     * Sets station
     *
     * @param \Swagger\Client\Model\ApiNowPlayingStation $station station
     *
     * @return $this
     */
    public function setStation($station)
    {
        $this->container['station'] = $station;

        return $this;
    }

    /**
     * Gets listeners
     *
     * @return \Swagger\Client\Model\ApiNowPlayingListeners
     */
    public function getListeners()
    {
        return $this->container['listeners'];
    }

    /**
     * Sets listeners
     *
     * @param \Swagger\Client\Model\ApiNowPlayingListeners $listeners listeners
     *
     * @return $this
     */
    public function setListeners($listeners)
    {
        $this->container['listeners'] = $listeners;

        return $this;
    }

    /**
     * Gets live
     *
     * @return \Swagger\Client\Model\ApiNowPlayingLive
     */
    public function getLive()
    {
        return $this->container['live'];
    }

    /**
     * Sets live
     *
     * @param \Swagger\Client\Model\ApiNowPlayingLive $live live
     *
     * @return $this
     */
    public function setLive($live)
    {
        $this->container['live'] = $live;

        return $this;
    }

    /**
     * Gets now_playing
     *
     * @return OneOfApiNowPlayingNowPlaying
     */
    public function getNowPlaying()
    {
        return $this->container['now_playing'];
    }

    /**
     * Sets now_playing
     *
     * @param OneOfApiNowPlayingNowPlaying $now_playing now_playing
     *
     * @return $this
     */
    public function setNowPlaying($now_playing)
    {
        $this->container['now_playing'] = $now_playing;

        return $this;
    }

    /**
     * Gets playing_next
     *
     * @return OneOfApiNowPlayingPlayingNext
     */
    public function getPlayingNext()
    {
        return $this->container['playing_next'];
    }

    /**
     * Sets playing_next
     *
     * @param OneOfApiNowPlayingPlayingNext $playing_next playing_next
     *
     * @return $this
     */
    public function setPlayingNext($playing_next)
    {
        $this->container['playing_next'] = $playing_next;

        return $this;
    }

    /**
     * Gets song_history
     *
     * @return \Swagger\Client\Model\ApiNowPlayingSongHistory[]
     */
    public function getSongHistory()
    {
        return $this->container['song_history'];
    }

    /**
     * Sets song_history
     *
     * @param \Swagger\Client\Model\ApiNowPlayingSongHistory[] $song_history *_/
     *
     * @return $this
     */
    public function setSongHistory($song_history)
    {
        $this->container['song_history'] = $song_history;

        return $this;
    }

    /**
     * Gets is_online
     *
     * @return bool
     */
    public function getIsOnline()
    {
        return $this->container['is_online'];
    }

    /**
     * Sets is_online
     *
     * @param bool $is_online Whether the stream is currently online.
     *
     * @return $this
     */
    public function setIsOnline($is_online)
    {
        $this->container['is_online'] = $is_online;

        return $this;
    }

    /**
     * Gets cache
     *
     * @return string
     */
    public function getCache()
    {
        return $this->container['cache'];
    }

    /**
     * Sets cache
     *
     * @param string $cache Debugging information about where the now playing data comes from.
     *
     * @return $this
     */
    public function setCache($cache)
    {
        $allowedValues = $this->getCacheAllowableValues();
        if (!is_null($cache) && !in_array($cache, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'cache', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['cache'] = $cache;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
