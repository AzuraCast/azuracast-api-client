<?php
/**
 * StationStreamer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * OpenAPI spec version: 0.17.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * StationStreamer Class Doc Comment
 *
 * @category Class
 * @description Station streamers (DJ accounts) allowed to broadcast to a station.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StationStreamer extends HasAutoIncrementId 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StationStreamer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'streamer_username' => 'string',
'streamer_password' => 'string',
'display_name' => 'string',
'comments' => 'string',
'is_active' => 'bool',
'enforce_schedule' => 'bool',
'reactivate_at' => 'int',
'schedule_items' => 'null[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'streamer_username' => null,
'streamer_password' => null,
'display_name' => null,
'comments' => null,
'is_active' => null,
'enforce_schedule' => null,
'reactivate_at' => null,
'schedule_items' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'streamer_username' => 'streamer_username',
'streamer_password' => 'streamer_password',
'display_name' => 'display_name',
'comments' => 'comments',
'is_active' => 'is_active',
'enforce_schedule' => 'enforce_schedule',
'reactivate_at' => 'reactivate_at',
'schedule_items' => 'schedule_items'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'streamer_username' => 'setStreamerUsername',
'streamer_password' => 'setStreamerPassword',
'display_name' => 'setDisplayName',
'comments' => 'setComments',
'is_active' => 'setIsActive',
'enforce_schedule' => 'setEnforceSchedule',
'reactivate_at' => 'setReactivateAt',
'schedule_items' => 'setScheduleItems'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'streamer_username' => 'getStreamerUsername',
'streamer_password' => 'getStreamerPassword',
'display_name' => 'getDisplayName',
'comments' => 'getComments',
'is_active' => 'getIsActive',
'enforce_schedule' => 'getEnforceSchedule',
'reactivate_at' => 'getReactivateAt',
'schedule_items' => 'getScheduleItems'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['streamer_username'] = isset($data['streamer_username']) ? $data['streamer_username'] : null;
        $this->container['streamer_password'] = isset($data['streamer_password']) ? $data['streamer_password'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['comments'] = isset($data['comments']) ? $data['comments'] : null;
        $this->container['is_active'] = isset($data['is_active']) ? $data['is_active'] : null;
        $this->container['enforce_schedule'] = isset($data['enforce_schedule']) ? $data['enforce_schedule'] : null;
        $this->container['reactivate_at'] = isset($data['reactivate_at']) ? $data['reactivate_at'] : null;
        $this->container['schedule_items'] = isset($data['schedule_items']) ? $data['schedule_items'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets streamer_username
     *
     * @return string
     */
    public function getStreamerUsername()
    {
        return $this->container['streamer_username'];
    }

    /**
     * Sets streamer_username
     *
     * @param string $streamer_username streamer_username
     *
     * @return $this
     */
    public function setStreamerUsername($streamer_username)
    {
        $this->container['streamer_username'] = $streamer_username;

        return $this;
    }

    /**
     * Gets streamer_password
     *
     * @return string
     */
    public function getStreamerPassword()
    {
        return $this->container['streamer_password'];
    }

    /**
     * Sets streamer_password
     *
     * @param string $streamer_password streamer_password
     *
     * @return $this
     */
    public function setStreamerPassword($streamer_password)
    {
        $this->container['streamer_password'] = $streamer_password;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return string
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param string $comments comments
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets is_active
     *
     * @return bool
     */
    public function getIsActive()
    {
        return $this->container['is_active'];
    }

    /**
     * Sets is_active
     *
     * @param bool $is_active is_active
     *
     * @return $this
     */
    public function setIsActive($is_active)
    {
        $this->container['is_active'] = $is_active;

        return $this;
    }

    /**
     * Gets enforce_schedule
     *
     * @return bool
     */
    public function getEnforceSchedule()
    {
        return $this->container['enforce_schedule'];
    }

    /**
     * Sets enforce_schedule
     *
     * @param bool $enforce_schedule enforce_schedule
     *
     * @return $this
     */
    public function setEnforceSchedule($enforce_schedule)
    {
        $this->container['enforce_schedule'] = $enforce_schedule;

        return $this;
    }

    /**
     * Gets reactivate_at
     *
     * @return int
     */
    public function getReactivateAt()
    {
        return $this->container['reactivate_at'];
    }

    /**
     * Sets reactivate_at
     *
     * @param int $reactivate_at reactivate_at
     *
     * @return $this
     */
    public function setReactivateAt($reactivate_at)
    {
        $this->container['reactivate_at'] = $reactivate_at;

        return $this;
    }

    /**
     * Gets schedule_items
     *
     * @return null[]
     */
    public function getScheduleItems()
    {
        return $this->container['schedule_items'];
    }

    /**
     * Sets schedule_items
     *
     * @param null[] $schedule_items StationSchedule> *_/
     *
     * @return $this
     */
    public function setScheduleItems($schedule_items)
    {
        $this->container['schedule_items'] = $schedule_items;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
