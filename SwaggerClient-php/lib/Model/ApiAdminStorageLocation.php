<?php
/**
 * ApiAdminStorageLocation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * OpenAPI spec version: 0.17.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ApiAdminStorageLocation Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApiAdminStorageLocation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Api_Admin_StorageLocation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
'type' => 'string',
'adapter' => 'string',
'path' => 'string',
's3_credential_key' => 'string',
's3_credential_secret' => 'string',
's3_region' => 'string',
's3_version' => 'string',
's3_bucket' => 'string',
's3_endpoint' => 'string',
'dropbox_auth_token' => 'string',
'sftp_host' => 'string',
'sftp_username' => 'string',
'sftp_password' => 'string',
'sftp_port' => 'int',
'sftp_private_key' => 'string',
'sftp_private_key_pass_phrase' => 'string',
'storage_quota' => 'string',
'storage_quota_bytes' => 'string',
'storage_used' => 'string',
'storage_used_bytes' => 'string',
'storage_available' => 'string',
'storage_available_bytes' => 'string',
'storage_used_percent' => 'int',
'is_full' => 'bool',
'uri' => 'string',
'stations' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'type' => null,
'adapter' => null,
'path' => null,
's3_credential_key' => null,
's3_credential_secret' => null,
's3_region' => null,
's3_version' => null,
's3_bucket' => null,
's3_endpoint' => null,
'dropbox_auth_token' => null,
'sftp_host' => null,
'sftp_username' => null,
'sftp_password' => null,
'sftp_port' => null,
'sftp_private_key' => null,
'sftp_private_key_pass_phrase' => null,
'storage_quota' => null,
'storage_quota_bytes' => null,
'storage_used' => null,
'storage_used_bytes' => null,
'storage_available' => null,
'storage_available_bytes' => null,
'storage_used_percent' => null,
'is_full' => null,
'uri' => null,
'stations' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'type' => 'type',
'adapter' => 'adapter',
'path' => 'path',
's3_credential_key' => 's3CredentialKey',
's3_credential_secret' => 's3CredentialSecret',
's3_region' => 's3Region',
's3_version' => 's3Version',
's3_bucket' => 's3Bucket',
's3_endpoint' => 's3Endpoint',
'dropbox_auth_token' => 'dropboxAuthToken',
'sftp_host' => 'sftpHost',
'sftp_username' => 'sftpUsername',
'sftp_password' => 'sftpPassword',
'sftp_port' => 'sftpPort',
'sftp_private_key' => 'sftpPrivateKey',
'sftp_private_key_pass_phrase' => 'sftpPrivateKeyPassPhrase',
'storage_quota' => 'storageQuota',
'storage_quota_bytes' => 'storageQuotaBytes',
'storage_used' => 'storageUsed',
'storage_used_bytes' => 'storageUsedBytes',
'storage_available' => 'storageAvailable',
'storage_available_bytes' => 'storageAvailableBytes',
'storage_used_percent' => 'storageUsedPercent',
'is_full' => 'isFull',
'uri' => 'uri',
'stations' => 'stations'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'type' => 'setType',
'adapter' => 'setAdapter',
'path' => 'setPath',
's3_credential_key' => 'setS3CredentialKey',
's3_credential_secret' => 'setS3CredentialSecret',
's3_region' => 'setS3Region',
's3_version' => 'setS3Version',
's3_bucket' => 'setS3Bucket',
's3_endpoint' => 'setS3Endpoint',
'dropbox_auth_token' => 'setDropboxAuthToken',
'sftp_host' => 'setSftpHost',
'sftp_username' => 'setSftpUsername',
'sftp_password' => 'setSftpPassword',
'sftp_port' => 'setSftpPort',
'sftp_private_key' => 'setSftpPrivateKey',
'sftp_private_key_pass_phrase' => 'setSftpPrivateKeyPassPhrase',
'storage_quota' => 'setStorageQuota',
'storage_quota_bytes' => 'setStorageQuotaBytes',
'storage_used' => 'setStorageUsed',
'storage_used_bytes' => 'setStorageUsedBytes',
'storage_available' => 'setStorageAvailable',
'storage_available_bytes' => 'setStorageAvailableBytes',
'storage_used_percent' => 'setStorageUsedPercent',
'is_full' => 'setIsFull',
'uri' => 'setUri',
'stations' => 'setStations'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'type' => 'getType',
'adapter' => 'getAdapter',
'path' => 'getPath',
's3_credential_key' => 'getS3CredentialKey',
's3_credential_secret' => 'getS3CredentialSecret',
's3_region' => 'getS3Region',
's3_version' => 'getS3Version',
's3_bucket' => 'getS3Bucket',
's3_endpoint' => 'getS3Endpoint',
'dropbox_auth_token' => 'getDropboxAuthToken',
'sftp_host' => 'getSftpHost',
'sftp_username' => 'getSftpUsername',
'sftp_password' => 'getSftpPassword',
'sftp_port' => 'getSftpPort',
'sftp_private_key' => 'getSftpPrivateKey',
'sftp_private_key_pass_phrase' => 'getSftpPrivateKeyPassPhrase',
'storage_quota' => 'getStorageQuota',
'storage_quota_bytes' => 'getStorageQuotaBytes',
'storage_used' => 'getStorageUsed',
'storage_used_bytes' => 'getStorageUsedBytes',
'storage_available' => 'getStorageAvailable',
'storage_available_bytes' => 'getStorageAvailableBytes',
'storage_used_percent' => 'getStorageUsedPercent',
'is_full' => 'getIsFull',
'uri' => 'getUri',
'stations' => 'getStations'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['adapter'] = isset($data['adapter']) ? $data['adapter'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['s3_credential_key'] = isset($data['s3_credential_key']) ? $data['s3_credential_key'] : null;
        $this->container['s3_credential_secret'] = isset($data['s3_credential_secret']) ? $data['s3_credential_secret'] : null;
        $this->container['s3_region'] = isset($data['s3_region']) ? $data['s3_region'] : null;
        $this->container['s3_version'] = isset($data['s3_version']) ? $data['s3_version'] : null;
        $this->container['s3_bucket'] = isset($data['s3_bucket']) ? $data['s3_bucket'] : null;
        $this->container['s3_endpoint'] = isset($data['s3_endpoint']) ? $data['s3_endpoint'] : null;
        $this->container['dropbox_auth_token'] = isset($data['dropbox_auth_token']) ? $data['dropbox_auth_token'] : null;
        $this->container['sftp_host'] = isset($data['sftp_host']) ? $data['sftp_host'] : null;
        $this->container['sftp_username'] = isset($data['sftp_username']) ? $data['sftp_username'] : null;
        $this->container['sftp_password'] = isset($data['sftp_password']) ? $data['sftp_password'] : null;
        $this->container['sftp_port'] = isset($data['sftp_port']) ? $data['sftp_port'] : null;
        $this->container['sftp_private_key'] = isset($data['sftp_private_key']) ? $data['sftp_private_key'] : null;
        $this->container['sftp_private_key_pass_phrase'] = isset($data['sftp_private_key_pass_phrase']) ? $data['sftp_private_key_pass_phrase'] : null;
        $this->container['storage_quota'] = isset($data['storage_quota']) ? $data['storage_quota'] : null;
        $this->container['storage_quota_bytes'] = isset($data['storage_quota_bytes']) ? $data['storage_quota_bytes'] : null;
        $this->container['storage_used'] = isset($data['storage_used']) ? $data['storage_used'] : null;
        $this->container['storage_used_bytes'] = isset($data['storage_used_bytes']) ? $data['storage_used_bytes'] : null;
        $this->container['storage_available'] = isset($data['storage_available']) ? $data['storage_available'] : null;
        $this->container['storage_available_bytes'] = isset($data['storage_available_bytes']) ? $data['storage_available_bytes'] : null;
        $this->container['storage_used_percent'] = isset($data['storage_used_percent']) ? $data['storage_used_percent'] : null;
        $this->container['is_full'] = isset($data['is_full']) ? $data['is_full'] : null;
        $this->container['uri'] = isset($data['uri']) ? $data['uri'] : null;
        $this->container['stations'] = isset($data['stations']) ? $data['stations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type The type of storage location.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets adapter
     *
     * @return string
     */
    public function getAdapter()
    {
        return $this->container['adapter'];
    }

    /**
     * Sets adapter
     *
     * @param string $adapter The storage adapter to use for this location.
     *
     * @return $this
     */
    public function setAdapter($adapter)
    {
        $this->container['adapter'] = $adapter;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The local path, if the local adapter is used, or path prefix for S3/remote adapters.
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets s3_credential_key
     *
     * @return string
     */
    public function getS3CredentialKey()
    {
        return $this->container['s3_credential_key'];
    }

    /**
     * Sets s3_credential_key
     *
     * @param string $s3_credential_key The credential key for S3 adapters.
     *
     * @return $this
     */
    public function setS3CredentialKey($s3_credential_key)
    {
        $this->container['s3_credential_key'] = $s3_credential_key;

        return $this;
    }

    /**
     * Gets s3_credential_secret
     *
     * @return string
     */
    public function getS3CredentialSecret()
    {
        return $this->container['s3_credential_secret'];
    }

    /**
     * Sets s3_credential_secret
     *
     * @param string $s3_credential_secret The credential secret for S3 adapters.
     *
     * @return $this
     */
    public function setS3CredentialSecret($s3_credential_secret)
    {
        $this->container['s3_credential_secret'] = $s3_credential_secret;

        return $this;
    }

    /**
     * Gets s3_region
     *
     * @return string
     */
    public function getS3Region()
    {
        return $this->container['s3_region'];
    }

    /**
     * Sets s3_region
     *
     * @param string $s3_region The region for S3 adapters.
     *
     * @return $this
     */
    public function setS3Region($s3_region)
    {
        $this->container['s3_region'] = $s3_region;

        return $this;
    }

    /**
     * Gets s3_version
     *
     * @return string
     */
    public function getS3Version()
    {
        return $this->container['s3_version'];
    }

    /**
     * Sets s3_version
     *
     * @param string $s3_version The API version for S3 adapters.
     *
     * @return $this
     */
    public function setS3Version($s3_version)
    {
        $this->container['s3_version'] = $s3_version;

        return $this;
    }

    /**
     * Gets s3_bucket
     *
     * @return string
     */
    public function getS3Bucket()
    {
        return $this->container['s3_bucket'];
    }

    /**
     * Sets s3_bucket
     *
     * @param string $s3_bucket The S3 bucket name for S3 adapters.
     *
     * @return $this
     */
    public function setS3Bucket($s3_bucket)
    {
        $this->container['s3_bucket'] = $s3_bucket;

        return $this;
    }

    /**
     * Gets s3_endpoint
     *
     * @return string
     */
    public function getS3Endpoint()
    {
        return $this->container['s3_endpoint'];
    }

    /**
     * Sets s3_endpoint
     *
     * @param string $s3_endpoint The optional custom S3 endpoint S3 adapters.
     *
     * @return $this
     */
    public function setS3Endpoint($s3_endpoint)
    {
        $this->container['s3_endpoint'] = $s3_endpoint;

        return $this;
    }

    /**
     * Gets dropbox_auth_token
     *
     * @return string
     */
    public function getDropboxAuthToken()
    {
        return $this->container['dropbox_auth_token'];
    }

    /**
     * Sets dropbox_auth_token
     *
     * @param string $dropbox_auth_token The optional Dropbox Auth Token.
     *
     * @return $this
     */
    public function setDropboxAuthToken($dropbox_auth_token)
    {
        $this->container['dropbox_auth_token'] = $dropbox_auth_token;

        return $this;
    }

    /**
     * Gets sftp_host
     *
     * @return string
     */
    public function getSftpHost()
    {
        return $this->container['sftp_host'];
    }

    /**
     * Sets sftp_host
     *
     * @param string $sftp_host The host for SFTP adapters
     *
     * @return $this
     */
    public function setSftpHost($sftp_host)
    {
        $this->container['sftp_host'] = $sftp_host;

        return $this;
    }

    /**
     * Gets sftp_username
     *
     * @return string
     */
    public function getSftpUsername()
    {
        return $this->container['sftp_username'];
    }

    /**
     * Sets sftp_username
     *
     * @param string $sftp_username The username for SFTP adapters
     *
     * @return $this
     */
    public function setSftpUsername($sftp_username)
    {
        $this->container['sftp_username'] = $sftp_username;

        return $this;
    }

    /**
     * Gets sftp_password
     *
     * @return string
     */
    public function getSftpPassword()
    {
        return $this->container['sftp_password'];
    }

    /**
     * Sets sftp_password
     *
     * @param string $sftp_password The password for SFTP adapters
     *
     * @return $this
     */
    public function setSftpPassword($sftp_password)
    {
        $this->container['sftp_password'] = $sftp_password;

        return $this;
    }

    /**
     * Gets sftp_port
     *
     * @return int
     */
    public function getSftpPort()
    {
        return $this->container['sftp_port'];
    }

    /**
     * Sets sftp_port
     *
     * @param int $sftp_port The port for SFTP adapters
     *
     * @return $this
     */
    public function setSftpPort($sftp_port)
    {
        $this->container['sftp_port'] = $sftp_port;

        return $this;
    }

    /**
     * Gets sftp_private_key
     *
     * @return string
     */
    public function getSftpPrivateKey()
    {
        return $this->container['sftp_private_key'];
    }

    /**
     * Sets sftp_private_key
     *
     * @param string $sftp_private_key The private key for SFTP adapters
     *
     * @return $this
     */
    public function setSftpPrivateKey($sftp_private_key)
    {
        $this->container['sftp_private_key'] = $sftp_private_key;

        return $this;
    }

    /**
     * Gets sftp_private_key_pass_phrase
     *
     * @return string
     */
    public function getSftpPrivateKeyPassPhrase()
    {
        return $this->container['sftp_private_key_pass_phrase'];
    }

    /**
     * Sets sftp_private_key_pass_phrase
     *
     * @param string $sftp_private_key_pass_phrase The private key pass phrase for SFTP adapters
     *
     * @return $this
     */
    public function setSftpPrivateKeyPassPhrase($sftp_private_key_pass_phrase)
    {
        $this->container['sftp_private_key_pass_phrase'] = $sftp_private_key_pass_phrase;

        return $this;
    }

    /**
     * Gets storage_quota
     *
     * @return string
     */
    public function getStorageQuota()
    {
        return $this->container['storage_quota'];
    }

    /**
     * Sets storage_quota
     *
     * @param string $storage_quota storage_quota
     *
     * @return $this
     */
    public function setStorageQuota($storage_quota)
    {
        $this->container['storage_quota'] = $storage_quota;

        return $this;
    }

    /**
     * Gets storage_quota_bytes
     *
     * @return string
     */
    public function getStorageQuotaBytes()
    {
        return $this->container['storage_quota_bytes'];
    }

    /**
     * Sets storage_quota_bytes
     *
     * @param string $storage_quota_bytes storage_quota_bytes
     *
     * @return $this
     */
    public function setStorageQuotaBytes($storage_quota_bytes)
    {
        $this->container['storage_quota_bytes'] = $storage_quota_bytes;

        return $this;
    }

    /**
     * Gets storage_used
     *
     * @return string
     */
    public function getStorageUsed()
    {
        return $this->container['storage_used'];
    }

    /**
     * Sets storage_used
     *
     * @param string $storage_used storage_used
     *
     * @return $this
     */
    public function setStorageUsed($storage_used)
    {
        $this->container['storage_used'] = $storage_used;

        return $this;
    }

    /**
     * Gets storage_used_bytes
     *
     * @return string
     */
    public function getStorageUsedBytes()
    {
        return $this->container['storage_used_bytes'];
    }

    /**
     * Sets storage_used_bytes
     *
     * @param string $storage_used_bytes storage_used_bytes
     *
     * @return $this
     */
    public function setStorageUsedBytes($storage_used_bytes)
    {
        $this->container['storage_used_bytes'] = $storage_used_bytes;

        return $this;
    }

    /**
     * Gets storage_available
     *
     * @return string
     */
    public function getStorageAvailable()
    {
        return $this->container['storage_available'];
    }

    /**
     * Sets storage_available
     *
     * @param string $storage_available storage_available
     *
     * @return $this
     */
    public function setStorageAvailable($storage_available)
    {
        $this->container['storage_available'] = $storage_available;

        return $this;
    }

    /**
     * Gets storage_available_bytes
     *
     * @return string
     */
    public function getStorageAvailableBytes()
    {
        return $this->container['storage_available_bytes'];
    }

    /**
     * Sets storage_available_bytes
     *
     * @param string $storage_available_bytes storage_available_bytes
     *
     * @return $this
     */
    public function setStorageAvailableBytes($storage_available_bytes)
    {
        $this->container['storage_available_bytes'] = $storage_available_bytes;

        return $this;
    }

    /**
     * Gets storage_used_percent
     *
     * @return int
     */
    public function getStorageUsedPercent()
    {
        return $this->container['storage_used_percent'];
    }

    /**
     * Sets storage_used_percent
     *
     * @param int $storage_used_percent storage_used_percent
     *
     * @return $this
     */
    public function setStorageUsedPercent($storage_used_percent)
    {
        $this->container['storage_used_percent'] = $storage_used_percent;

        return $this;
    }

    /**
     * Gets is_full
     *
     * @return bool
     */
    public function getIsFull()
    {
        return $this->container['is_full'];
    }

    /**
     * Sets is_full
     *
     * @param bool $is_full is_full
     *
     * @return $this
     */
    public function setIsFull($is_full)
    {
        $this->container['is_full'] = $is_full;

        return $this;
    }

    /**
     * Gets uri
     *
     * @return string
     */
    public function getUri()
    {
        return $this->container['uri'];
    }

    /**
     * Sets uri
     *
     * @param string $uri The URI associated with the storage location.
     *
     * @return $this
     */
    public function setUri($uri)
    {
        $this->container['uri'] = $uri;

        return $this;
    }

    /**
     * Gets stations
     *
     * @return string[]
     */
    public function getStations()
    {
        return $this->container['stations'];
    }

    /**
     * Sets stations
     *
     * @param string[] $stations The stations using this storage location, if any.
     *
     * @return $this
     */
    public function setStations($stations)
    {
        $this->container['stations'] = $stations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
