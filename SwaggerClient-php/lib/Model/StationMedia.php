<?php
/**
 * StationMedia
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * OpenAPI spec version: 0.17.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * StationMedia Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StationMedia extends HasAutoIncrementId 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StationMedia';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'song_id' => 'string',
'text' => 'string',
'artist' => 'string',
'title' => 'string',
'unique_id' => 'string',
'album' => 'string',
'genre' => 'string',
'lyrics' => 'string',
'isrc' => 'string',
'length' => 'float',
'length_text' => 'string',
'path' => 'string',
'mtime' => 'int',
'amplify' => 'float',
'fade_overlap' => 'float',
'fade_in' => 'float',
'fade_out' => 'float',
'cue_in' => 'float',
'cue_out' => 'float',
'art_updated_at' => 'int',
'playlists' => 'null[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'song_id' => null,
'text' => null,
'artist' => null,
'title' => null,
'unique_id' => null,
'album' => null,
'genre' => null,
'lyrics' => null,
'isrc' => null,
'length' => 'float',
'length_text' => null,
'path' => null,
'mtime' => null,
'amplify' => 'float',
'fade_overlap' => 'float',
'fade_in' => 'float',
'fade_out' => 'float',
'cue_in' => 'float',
'cue_out' => 'float',
'art_updated_at' => null,
'playlists' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'song_id' => 'song_id',
'text' => 'text',
'artist' => 'artist',
'title' => 'title',
'unique_id' => 'unique_id',
'album' => 'album',
'genre' => 'genre',
'lyrics' => 'lyrics',
'isrc' => 'isrc',
'length' => 'length',
'length_text' => 'length_text',
'path' => 'path',
'mtime' => 'mtime',
'amplify' => 'amplify',
'fade_overlap' => 'fade_overlap',
'fade_in' => 'fade_in',
'fade_out' => 'fade_out',
'cue_in' => 'cue_in',
'cue_out' => 'cue_out',
'art_updated_at' => 'art_updated_at',
'playlists' => 'playlists'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'song_id' => 'setSongId',
'text' => 'setText',
'artist' => 'setArtist',
'title' => 'setTitle',
'unique_id' => 'setUniqueId',
'album' => 'setAlbum',
'genre' => 'setGenre',
'lyrics' => 'setLyrics',
'isrc' => 'setIsrc',
'length' => 'setLength',
'length_text' => 'setLengthText',
'path' => 'setPath',
'mtime' => 'setMtime',
'amplify' => 'setAmplify',
'fade_overlap' => 'setFadeOverlap',
'fade_in' => 'setFadeIn',
'fade_out' => 'setFadeOut',
'cue_in' => 'setCueIn',
'cue_out' => 'setCueOut',
'art_updated_at' => 'setArtUpdatedAt',
'playlists' => 'setPlaylists'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'song_id' => 'getSongId',
'text' => 'getText',
'artist' => 'getArtist',
'title' => 'getTitle',
'unique_id' => 'getUniqueId',
'album' => 'getAlbum',
'genre' => 'getGenre',
'lyrics' => 'getLyrics',
'isrc' => 'getIsrc',
'length' => 'getLength',
'length_text' => 'getLengthText',
'path' => 'getPath',
'mtime' => 'getMtime',
'amplify' => 'getAmplify',
'fade_overlap' => 'getFadeOverlap',
'fade_in' => 'getFadeIn',
'fade_out' => 'getFadeOut',
'cue_in' => 'getCueIn',
'cue_out' => 'getCueOut',
'art_updated_at' => 'getArtUpdatedAt',
'playlists' => 'getPlaylists'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['song_id'] = isset($data['song_id']) ? $data['song_id'] : null;
        $this->container['text'] = isset($data['text']) ? $data['text'] : null;
        $this->container['artist'] = isset($data['artist']) ? $data['artist'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['unique_id'] = isset($data['unique_id']) ? $data['unique_id'] : null;
        $this->container['album'] = isset($data['album']) ? $data['album'] : null;
        $this->container['genre'] = isset($data['genre']) ? $data['genre'] : null;
        $this->container['lyrics'] = isset($data['lyrics']) ? $data['lyrics'] : null;
        $this->container['isrc'] = isset($data['isrc']) ? $data['isrc'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['length_text'] = isset($data['length_text']) ? $data['length_text'] : null;
        $this->container['path'] = isset($data['path']) ? $data['path'] : null;
        $this->container['mtime'] = isset($data['mtime']) ? $data['mtime'] : null;
        $this->container['amplify'] = isset($data['amplify']) ? $data['amplify'] : null;
        $this->container['fade_overlap'] = isset($data['fade_overlap']) ? $data['fade_overlap'] : null;
        $this->container['fade_in'] = isset($data['fade_in']) ? $data['fade_in'] : null;
        $this->container['fade_out'] = isset($data['fade_out']) ? $data['fade_out'] : null;
        $this->container['cue_in'] = isset($data['cue_in']) ? $data['cue_in'] : null;
        $this->container['cue_out'] = isset($data['cue_out']) ? $data['cue_out'] : null;
        $this->container['art_updated_at'] = isset($data['art_updated_at']) ? $data['art_updated_at'] : null;
        $this->container['playlists'] = isset($data['playlists']) ? $data['playlists'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets song_id
     *
     * @return string
     */
    public function getSongId()
    {
        return $this->container['song_id'];
    }

    /**
     * Sets song_id
     *
     * @param string $song_id song_id
     *
     * @return $this
     */
    public function setSongId($song_id)
    {
        $this->container['song_id'] = $song_id;

        return $this;
    }

    /**
     * Gets text
     *
     * @return string
     */
    public function getText()
    {
        return $this->container['text'];
    }

    /**
     * Sets text
     *
     * @param string $text text
     *
     * @return $this
     */
    public function setText($text)
    {
        $this->container['text'] = $text;

        return $this;
    }

    /**
     * Gets artist
     *
     * @return string
     */
    public function getArtist()
    {
        return $this->container['artist'];
    }

    /**
     * Sets artist
     *
     * @param string $artist artist
     *
     * @return $this
     */
    public function setArtist($artist)
    {
        $this->container['artist'] = $artist;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets unique_id
     *
     * @return string
     */
    public function getUniqueId()
    {
        return $this->container['unique_id'];
    }

    /**
     * Sets unique_id
     *
     * @param string $unique_id A unique identifier associated with this record.
     *
     * @return $this
     */
    public function setUniqueId($unique_id)
    {
        $this->container['unique_id'] = $unique_id;

        return $this;
    }

    /**
     * Gets album
     *
     * @return string
     */
    public function getAlbum()
    {
        return $this->container['album'];
    }

    /**
     * Sets album
     *
     * @param string $album The name of the media file's album.
     *
     * @return $this
     */
    public function setAlbum($album)
    {
        $this->container['album'] = $album;

        return $this;
    }

    /**
     * Gets genre
     *
     * @return string
     */
    public function getGenre()
    {
        return $this->container['genre'];
    }

    /**
     * Sets genre
     *
     * @param string $genre The genre of the media file.
     *
     * @return $this
     */
    public function setGenre($genre)
    {
        $this->container['genre'] = $genre;

        return $this;
    }

    /**
     * Gets lyrics
     *
     * @return string
     */
    public function getLyrics()
    {
        return $this->container['lyrics'];
    }

    /**
     * Sets lyrics
     *
     * @param string $lyrics Full lyrics of the track, if available.
     *
     * @return $this
     */
    public function setLyrics($lyrics)
    {
        $this->container['lyrics'] = $lyrics;

        return $this;
    }

    /**
     * Gets isrc
     *
     * @return string
     */
    public function getIsrc()
    {
        return $this->container['isrc'];
    }

    /**
     * Sets isrc
     *
     * @param string $isrc The track ISRC (International Standard Recording Code), used for licensing purposes.
     *
     * @return $this
     */
    public function setIsrc($isrc)
    {
        $this->container['isrc'] = $isrc;

        return $this;
    }

    /**
     * Gets length
     *
     * @return float
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param float $length The song duration in seconds.
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets length_text
     *
     * @return string
     */
    public function getLengthText()
    {
        return $this->container['length_text'];
    }

    /**
     * Sets length_text
     *
     * @param string $length_text The formatted song duration (in mm:ss format)
     *
     * @return $this
     */
    public function setLengthText($length_text)
    {
        $this->container['length_text'] = $length_text;

        return $this;
    }

    /**
     * Gets path
     *
     * @return string
     */
    public function getPath()
    {
        return $this->container['path'];
    }

    /**
     * Sets path
     *
     * @param string $path The relative path of the media file.
     *
     * @return $this
     */
    public function setPath($path)
    {
        $this->container['path'] = $path;

        return $this;
    }

    /**
     * Gets mtime
     *
     * @return int
     */
    public function getMtime()
    {
        return $this->container['mtime'];
    }

    /**
     * Sets mtime
     *
     * @param int $mtime The UNIX timestamp when the database was last modified.
     *
     * @return $this
     */
    public function setMtime($mtime)
    {
        $this->container['mtime'] = $mtime;

        return $this;
    }

    /**
     * Gets amplify
     *
     * @return float
     */
    public function getAmplify()
    {
        return $this->container['amplify'];
    }

    /**
     * Sets amplify
     *
     * @param float $amplify The amount of amplification (in dB) to be applied to the radio source (liq_amplify)
     *
     * @return $this
     */
    public function setAmplify($amplify)
    {
        $this->container['amplify'] = $amplify;

        return $this;
    }

    /**
     * Gets fade_overlap
     *
     * @return float
     */
    public function getFadeOverlap()
    {
        return $this->container['fade_overlap'];
    }

    /**
     * Sets fade_overlap
     *
     * @param float $fade_overlap The length of time (in seconds) before the next song starts in the fade (liq_start_next)
     *
     * @return $this
     */
    public function setFadeOverlap($fade_overlap)
    {
        $this->container['fade_overlap'] = $fade_overlap;

        return $this;
    }

    /**
     * Gets fade_in
     *
     * @return float
     */
    public function getFadeIn()
    {
        return $this->container['fade_in'];
    }

    /**
     * Sets fade_in
     *
     * @param float $fade_in The length of time (in seconds) to fade in the next track (liq_fade_in)
     *
     * @return $this
     */
    public function setFadeIn($fade_in)
    {
        $this->container['fade_in'] = $fade_in;

        return $this;
    }

    /**
     * Gets fade_out
     *
     * @return float
     */
    public function getFadeOut()
    {
        return $this->container['fade_out'];
    }

    /**
     * Sets fade_out
     *
     * @param float $fade_out The length of time (in seconds) to fade out the previous track (liq_fade_out)
     *
     * @return $this
     */
    public function setFadeOut($fade_out)
    {
        $this->container['fade_out'] = $fade_out;

        return $this;
    }

    /**
     * Gets cue_in
     *
     * @return float
     */
    public function getCueIn()
    {
        return $this->container['cue_in'];
    }

    /**
     * Sets cue_in
     *
     * @param float $cue_in The length of time (in seconds) from the start of the track to start playing (liq_cue_in)
     *
     * @return $this
     */
    public function setCueIn($cue_in)
    {
        $this->container['cue_in'] = $cue_in;

        return $this;
    }

    /**
     * Gets cue_out
     *
     * @return float
     */
    public function getCueOut()
    {
        return $this->container['cue_out'];
    }

    /**
     * Sets cue_out
     *
     * @param float $cue_out The length of time (in seconds) from the CUE-IN of the track to stop playing (liq_cue_out)
     *
     * @return $this
     */
    public function setCueOut($cue_out)
    {
        $this->container['cue_out'] = $cue_out;

        return $this;
    }

    /**
     * Gets art_updated_at
     *
     * @return int
     */
    public function getArtUpdatedAt()
    {
        return $this->container['art_updated_at'];
    }

    /**
     * Sets art_updated_at
     *
     * @param int $art_updated_at The latest time (UNIX timestamp) when album art was updated.
     *
     * @return $this
     */
    public function setArtUpdatedAt($art_updated_at)
    {
        $this->container['art_updated_at'] = $art_updated_at;

        return $this;
    }

    /**
     * Gets playlists
     *
     * @return null[]
     */
    public function getPlaylists()
    {
        return $this->container['playlists'];
    }

    /**
     * Sets playlists
     *
     * @param null[] $playlists StationPlaylistMedia> *_/
     *
     * @return $this
     */
    public function setPlaylists($playlists)
    {
        $this->container['playlists'] = $playlists;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
