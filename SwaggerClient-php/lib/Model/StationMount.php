<?php
/**
 * StationMount
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * OpenAPI spec version: 0.17.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * StationMount Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StationMount extends HasAutoIncrementId 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'StationMount';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'name' => 'string',
'display_name' => 'string',
'is_visible_on_public_pages' => 'bool',
'is_default' => 'bool',
'is_public' => 'bool',
'fallback_mount' => 'string',
'relay_url' => 'string',
'authhash' => 'string',
'max_listener_duration' => 'int',
'enable_autodj' => 'bool',
'autodj_format' => 'string',
'autodj_bitrate' => 'int',
'custom_listen_url' => 'string',
'frontend_config' => 'null[]',
'listeners_unique' => 'int',
'listeners_total' => 'int'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'name' => null,
'display_name' => null,
'is_visible_on_public_pages' => null,
'is_default' => null,
'is_public' => null,
'fallback_mount' => null,
'relay_url' => null,
'authhash' => null,
'max_listener_duration' => null,
'enable_autodj' => null,
'autodj_format' => null,
'autodj_bitrate' => null,
'custom_listen_url' => null,
'frontend_config' => null,
'listeners_unique' => null,
'listeners_total' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'name' => 'name',
'display_name' => 'display_name',
'is_visible_on_public_pages' => 'is_visible_on_public_pages',
'is_default' => 'is_default',
'is_public' => 'is_public',
'fallback_mount' => 'fallback_mount',
'relay_url' => 'relay_url',
'authhash' => 'authhash',
'max_listener_duration' => 'max_listener_duration',
'enable_autodj' => 'enable_autodj',
'autodj_format' => 'autodj_format',
'autodj_bitrate' => 'autodj_bitrate',
'custom_listen_url' => 'custom_listen_url',
'frontend_config' => 'frontend_config',
'listeners_unique' => 'listeners_unique',
'listeners_total' => 'listeners_total'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'name' => 'setName',
'display_name' => 'setDisplayName',
'is_visible_on_public_pages' => 'setIsVisibleOnPublicPages',
'is_default' => 'setIsDefault',
'is_public' => 'setIsPublic',
'fallback_mount' => 'setFallbackMount',
'relay_url' => 'setRelayUrl',
'authhash' => 'setAuthhash',
'max_listener_duration' => 'setMaxListenerDuration',
'enable_autodj' => 'setEnableAutodj',
'autodj_format' => 'setAutodjFormat',
'autodj_bitrate' => 'setAutodjBitrate',
'custom_listen_url' => 'setCustomListenUrl',
'frontend_config' => 'setFrontendConfig',
'listeners_unique' => 'setListenersUnique',
'listeners_total' => 'setListenersTotal'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'name' => 'getName',
'display_name' => 'getDisplayName',
'is_visible_on_public_pages' => 'getIsVisibleOnPublicPages',
'is_default' => 'getIsDefault',
'is_public' => 'getIsPublic',
'fallback_mount' => 'getFallbackMount',
'relay_url' => 'getRelayUrl',
'authhash' => 'getAuthhash',
'max_listener_duration' => 'getMaxListenerDuration',
'enable_autodj' => 'getEnableAutodj',
'autodj_format' => 'getAutodjFormat',
'autodj_bitrate' => 'getAutodjBitrate',
'custom_listen_url' => 'getCustomListenUrl',
'frontend_config' => 'getFrontendConfig',
'listeners_unique' => 'getListenersUnique',
'listeners_total' => 'getListenersTotal'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['is_visible_on_public_pages'] = isset($data['is_visible_on_public_pages']) ? $data['is_visible_on_public_pages'] : null;
        $this->container['is_default'] = isset($data['is_default']) ? $data['is_default'] : null;
        $this->container['is_public'] = isset($data['is_public']) ? $data['is_public'] : null;
        $this->container['fallback_mount'] = isset($data['fallback_mount']) ? $data['fallback_mount'] : null;
        $this->container['relay_url'] = isset($data['relay_url']) ? $data['relay_url'] : null;
        $this->container['authhash'] = isset($data['authhash']) ? $data['authhash'] : null;
        $this->container['max_listener_duration'] = isset($data['max_listener_duration']) ? $data['max_listener_duration'] : null;
        $this->container['enable_autodj'] = isset($data['enable_autodj']) ? $data['enable_autodj'] : null;
        $this->container['autodj_format'] = isset($data['autodj_format']) ? $data['autodj_format'] : null;
        $this->container['autodj_bitrate'] = isset($data['autodj_bitrate']) ? $data['autodj_bitrate'] : null;
        $this->container['custom_listen_url'] = isset($data['custom_listen_url']) ? $data['custom_listen_url'] : null;
        $this->container['frontend_config'] = isset($data['frontend_config']) ? $data['frontend_config'] : null;
        $this->container['listeners_unique'] = isset($data['listeners_unique']) ? $data['listeners_unique'] : null;
        $this->container['listeners_total'] = isset($data['listeners_total']) ? $data['listeners_total'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string $display_name display_name
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets is_visible_on_public_pages
     *
     * @return bool
     */
    public function getIsVisibleOnPublicPages()
    {
        return $this->container['is_visible_on_public_pages'];
    }

    /**
     * Sets is_visible_on_public_pages
     *
     * @param bool $is_visible_on_public_pages is_visible_on_public_pages
     *
     * @return $this
     */
    public function setIsVisibleOnPublicPages($is_visible_on_public_pages)
    {
        $this->container['is_visible_on_public_pages'] = $is_visible_on_public_pages;

        return $this;
    }

    /**
     * Gets is_default
     *
     * @return bool
     */
    public function getIsDefault()
    {
        return $this->container['is_default'];
    }

    /**
     * Sets is_default
     *
     * @param bool $is_default is_default
     *
     * @return $this
     */
    public function setIsDefault($is_default)
    {
        $this->container['is_default'] = $is_default;

        return $this;
    }

    /**
     * Gets is_public
     *
     * @return bool
     */
    public function getIsPublic()
    {
        return $this->container['is_public'];
    }

    /**
     * Sets is_public
     *
     * @param bool $is_public is_public
     *
     * @return $this
     */
    public function setIsPublic($is_public)
    {
        $this->container['is_public'] = $is_public;

        return $this;
    }

    /**
     * Gets fallback_mount
     *
     * @return string
     */
    public function getFallbackMount()
    {
        return $this->container['fallback_mount'];
    }

    /**
     * Sets fallback_mount
     *
     * @param string $fallback_mount fallback_mount
     *
     * @return $this
     */
    public function setFallbackMount($fallback_mount)
    {
        $this->container['fallback_mount'] = $fallback_mount;

        return $this;
    }

    /**
     * Gets relay_url
     *
     * @return string
     */
    public function getRelayUrl()
    {
        return $this->container['relay_url'];
    }

    /**
     * Sets relay_url
     *
     * @param string $relay_url relay_url
     *
     * @return $this
     */
    public function setRelayUrl($relay_url)
    {
        $this->container['relay_url'] = $relay_url;

        return $this;
    }

    /**
     * Gets authhash
     *
     * @return string
     */
    public function getAuthhash()
    {
        return $this->container['authhash'];
    }

    /**
     * Sets authhash
     *
     * @param string $authhash authhash
     *
     * @return $this
     */
    public function setAuthhash($authhash)
    {
        $this->container['authhash'] = $authhash;

        return $this;
    }

    /**
     * Gets max_listener_duration
     *
     * @return int
     */
    public function getMaxListenerDuration()
    {
        return $this->container['max_listener_duration'];
    }

    /**
     * Sets max_listener_duration
     *
     * @param int $max_listener_duration max_listener_duration
     *
     * @return $this
     */
    public function setMaxListenerDuration($max_listener_duration)
    {
        $this->container['max_listener_duration'] = $max_listener_duration;

        return $this;
    }

    /**
     * Gets enable_autodj
     *
     * @return bool
     */
    public function getEnableAutodj()
    {
        return $this->container['enable_autodj'];
    }

    /**
     * Sets enable_autodj
     *
     * @param bool $enable_autodj enable_autodj
     *
     * @return $this
     */
    public function setEnableAutodj($enable_autodj)
    {
        $this->container['enable_autodj'] = $enable_autodj;

        return $this;
    }

    /**
     * Gets autodj_format
     *
     * @return string
     */
    public function getAutodjFormat()
    {
        return $this->container['autodj_format'];
    }

    /**
     * Sets autodj_format
     *
     * @param string $autodj_format autodj_format
     *
     * @return $this
     */
    public function setAutodjFormat($autodj_format)
    {
        $this->container['autodj_format'] = $autodj_format;

        return $this;
    }

    /**
     * Gets autodj_bitrate
     *
     * @return int
     */
    public function getAutodjBitrate()
    {
        return $this->container['autodj_bitrate'];
    }

    /**
     * Sets autodj_bitrate
     *
     * @param int $autodj_bitrate autodj_bitrate
     *
     * @return $this
     */
    public function setAutodjBitrate($autodj_bitrate)
    {
        $this->container['autodj_bitrate'] = $autodj_bitrate;

        return $this;
    }

    /**
     * Gets custom_listen_url
     *
     * @return string
     */
    public function getCustomListenUrl()
    {
        return $this->container['custom_listen_url'];
    }

    /**
     * Sets custom_listen_url
     *
     * @param string $custom_listen_url custom_listen_url
     *
     * @return $this
     */
    public function setCustomListenUrl($custom_listen_url)
    {
        $this->container['custom_listen_url'] = $custom_listen_url;

        return $this;
    }

    /**
     * Gets frontend_config
     *
     * @return null[]
     */
    public function getFrontendConfig()
    {
        return $this->container['frontend_config'];
    }

    /**
     * Sets frontend_config
     *
     * @param null[] $frontend_config frontend_config
     *
     * @return $this
     */
    public function setFrontendConfig($frontend_config)
    {
        $this->container['frontend_config'] = $frontend_config;

        return $this;
    }

    /**
     * Gets listeners_unique
     *
     * @return int
     */
    public function getListenersUnique()
    {
        return $this->container['listeners_unique'];
    }

    /**
     * Sets listeners_unique
     *
     * @param int $listeners_unique The most recent number of unique listeners.
     *
     * @return $this
     */
    public function setListenersUnique($listeners_unique)
    {
        $this->container['listeners_unique'] = $listeners_unique;

        return $this;
    }

    /**
     * Gets listeners_total
     *
     * @return int
     */
    public function getListenersTotal()
    {
        return $this->container['listeners_total'];
    }

    /**
     * Sets listeners_total
     *
     * @param int $listeners_total The most recent number of total (non-unique) listeners.
     *
     * @return $this
     */
    public function setListenersTotal($listeners_total)
    {
        $this->container['listeners_total'] = $listeners_total;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
