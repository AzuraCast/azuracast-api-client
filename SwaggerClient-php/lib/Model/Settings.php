<?php
/**
 * Settings
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * OpenAPI spec version: 0.17.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Settings Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Settings implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Settings';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'app_unique_identifier' => 'string',
'base_url' => 'string',
'instance_name' => 'string',
'prefer_browser_url' => 'bool',
'use_radio_proxy' => 'bool',
'history_keep_days' => 'int',
'always_use_ssl' => 'bool',
'api_access_control' => 'string',
'enable_static_nowplaying' => 'bool',
'analytics' => 'string',
'check_for_updates' => 'bool',
'update_results' => 'null[]',
'update_last_run' => 'int',
'public_theme' => 'string',
'hide_album_art' => 'bool',
'homepage_redirect_url' => 'string',
'default_album_art_url' => 'string',
'use_external_album_art_when_processing_media' => 'bool',
'use_external_album_art_in_apis' => 'bool',
'last_fm_api_key' => 'string',
'hide_product_name' => 'bool',
'public_custom_css' => 'string',
'public_custom_js' => 'string',
'internal_custom_css' => 'string',
'backup_enabled' => 'bool',
'backup_time_code' => 'string',
'backup_exclude_media' => 'bool',
'backup_keep_copies' => 'int',
'backup_storage_location' => 'int',
'backup_format' => 'string',
'backup_last_run' => 'int',
'backup_last_output' => 'string',
'setup_complete_time' => 'int',
'sync_disabled' => 'bool',
'sync_last_run' => 'int',
'external_ip' => 'string',
'geolite_license_key' => 'string',
'geolite_last_run' => 'int',
'enable_advanced_features' => 'bool',
'mail_enabled' => 'bool',
'mail_sender_name' => 'string',
'mail_sender_email' => 'string',
'mail_smtp_host' => 'string',
'mail_smtp_port' => 'int',
'mail_smtp_username' => 'string',
'mail_smtp_password' => 'string',
'mail_smtp_secure' => 'bool',
'avatar_service' => 'string',
'avatar_default_url' => 'string',
'acme_email' => 'string',
'acme_domains' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'app_unique_identifier' => null,
'base_url' => null,
'instance_name' => null,
'prefer_browser_url' => null,
'use_radio_proxy' => null,
'history_keep_days' => null,
'always_use_ssl' => null,
'api_access_control' => null,
'enable_static_nowplaying' => null,
'analytics' => null,
'check_for_updates' => null,
'update_results' => null,
'update_last_run' => null,
'public_theme' => null,
'hide_album_art' => null,
'homepage_redirect_url' => null,
'default_album_art_url' => null,
'use_external_album_art_when_processing_media' => null,
'use_external_album_art_in_apis' => null,
'last_fm_api_key' => null,
'hide_product_name' => null,
'public_custom_css' => null,
'public_custom_js' => null,
'internal_custom_css' => null,
'backup_enabled' => null,
'backup_time_code' => null,
'backup_exclude_media' => null,
'backup_keep_copies' => null,
'backup_storage_location' => null,
'backup_format' => null,
'backup_last_run' => null,
'backup_last_output' => null,
'setup_complete_time' => null,
'sync_disabled' => null,
'sync_last_run' => null,
'external_ip' => null,
'geolite_license_key' => null,
'geolite_last_run' => null,
'enable_advanced_features' => null,
'mail_enabled' => null,
'mail_sender_name' => null,
'mail_sender_email' => null,
'mail_smtp_host' => null,
'mail_smtp_port' => null,
'mail_smtp_username' => null,
'mail_smtp_password' => null,
'mail_smtp_secure' => null,
'avatar_service' => null,
'avatar_default_url' => null,
'acme_email' => null,
'acme_domains' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'app_unique_identifier' => 'app_unique_identifier',
'base_url' => 'base_url',
'instance_name' => 'instance_name',
'prefer_browser_url' => 'prefer_browser_url',
'use_radio_proxy' => 'use_radio_proxy',
'history_keep_days' => 'history_keep_days',
'always_use_ssl' => 'always_use_ssl',
'api_access_control' => 'api_access_control',
'enable_static_nowplaying' => 'enable_static_nowplaying',
'analytics' => 'analytics',
'check_for_updates' => 'check_for_updates',
'update_results' => 'update_results',
'update_last_run' => 'update_last_run',
'public_theme' => 'public_theme',
'hide_album_art' => 'hide_album_art',
'homepage_redirect_url' => 'homepage_redirect_url',
'default_album_art_url' => 'default_album_art_url',
'use_external_album_art_when_processing_media' => 'use_external_album_art_when_processing_media',
'use_external_album_art_in_apis' => 'use_external_album_art_in_apis',
'last_fm_api_key' => 'last_fm_api_key',
'hide_product_name' => 'hide_product_name',
'public_custom_css' => 'public_custom_css',
'public_custom_js' => 'public_custom_js',
'internal_custom_css' => 'internal_custom_css',
'backup_enabled' => 'backup_enabled',
'backup_time_code' => 'backup_time_code',
'backup_exclude_media' => 'backup_exclude_media',
'backup_keep_copies' => 'backup_keep_copies',
'backup_storage_location' => 'backup_storage_location',
'backup_format' => 'backup_format',
'backup_last_run' => 'backup_last_run',
'backup_last_output' => 'backup_last_output',
'setup_complete_time' => 'setup_complete_time',
'sync_disabled' => 'sync_disabled',
'sync_last_run' => 'sync_last_run',
'external_ip' => 'external_ip',
'geolite_license_key' => 'geolite_license_key',
'geolite_last_run' => 'geolite_last_run',
'enable_advanced_features' => 'enable_advanced_features',
'mail_enabled' => 'mail_enabled',
'mail_sender_name' => 'mail_sender_name',
'mail_sender_email' => 'mail_sender_email',
'mail_smtp_host' => 'mail_smtp_host',
'mail_smtp_port' => 'mail_smtp_port',
'mail_smtp_username' => 'mail_smtp_username',
'mail_smtp_password' => 'mail_smtp_password',
'mail_smtp_secure' => 'mail_smtp_secure',
'avatar_service' => 'avatar_service',
'avatar_default_url' => 'avatar_default_url',
'acme_email' => 'acme_email',
'acme_domains' => 'acme_domains'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'app_unique_identifier' => 'setAppUniqueIdentifier',
'base_url' => 'setBaseUrl',
'instance_name' => 'setInstanceName',
'prefer_browser_url' => 'setPreferBrowserUrl',
'use_radio_proxy' => 'setUseRadioProxy',
'history_keep_days' => 'setHistoryKeepDays',
'always_use_ssl' => 'setAlwaysUseSsl',
'api_access_control' => 'setApiAccessControl',
'enable_static_nowplaying' => 'setEnableStaticNowplaying',
'analytics' => 'setAnalytics',
'check_for_updates' => 'setCheckForUpdates',
'update_results' => 'setUpdateResults',
'update_last_run' => 'setUpdateLastRun',
'public_theme' => 'setPublicTheme',
'hide_album_art' => 'setHideAlbumArt',
'homepage_redirect_url' => 'setHomepageRedirectUrl',
'default_album_art_url' => 'setDefaultAlbumArtUrl',
'use_external_album_art_when_processing_media' => 'setUseExternalAlbumArtWhenProcessingMedia',
'use_external_album_art_in_apis' => 'setUseExternalAlbumArtInApis',
'last_fm_api_key' => 'setLastFmApiKey',
'hide_product_name' => 'setHideProductName',
'public_custom_css' => 'setPublicCustomCss',
'public_custom_js' => 'setPublicCustomJs',
'internal_custom_css' => 'setInternalCustomCss',
'backup_enabled' => 'setBackupEnabled',
'backup_time_code' => 'setBackupTimeCode',
'backup_exclude_media' => 'setBackupExcludeMedia',
'backup_keep_copies' => 'setBackupKeepCopies',
'backup_storage_location' => 'setBackupStorageLocation',
'backup_format' => 'setBackupFormat',
'backup_last_run' => 'setBackupLastRun',
'backup_last_output' => 'setBackupLastOutput',
'setup_complete_time' => 'setSetupCompleteTime',
'sync_disabled' => 'setSyncDisabled',
'sync_last_run' => 'setSyncLastRun',
'external_ip' => 'setExternalIp',
'geolite_license_key' => 'setGeoliteLicenseKey',
'geolite_last_run' => 'setGeoliteLastRun',
'enable_advanced_features' => 'setEnableAdvancedFeatures',
'mail_enabled' => 'setMailEnabled',
'mail_sender_name' => 'setMailSenderName',
'mail_sender_email' => 'setMailSenderEmail',
'mail_smtp_host' => 'setMailSmtpHost',
'mail_smtp_port' => 'setMailSmtpPort',
'mail_smtp_username' => 'setMailSmtpUsername',
'mail_smtp_password' => 'setMailSmtpPassword',
'mail_smtp_secure' => 'setMailSmtpSecure',
'avatar_service' => 'setAvatarService',
'avatar_default_url' => 'setAvatarDefaultUrl',
'acme_email' => 'setAcmeEmail',
'acme_domains' => 'setAcmeDomains'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'app_unique_identifier' => 'getAppUniqueIdentifier',
'base_url' => 'getBaseUrl',
'instance_name' => 'getInstanceName',
'prefer_browser_url' => 'getPreferBrowserUrl',
'use_radio_proxy' => 'getUseRadioProxy',
'history_keep_days' => 'getHistoryKeepDays',
'always_use_ssl' => 'getAlwaysUseSsl',
'api_access_control' => 'getApiAccessControl',
'enable_static_nowplaying' => 'getEnableStaticNowplaying',
'analytics' => 'getAnalytics',
'check_for_updates' => 'getCheckForUpdates',
'update_results' => 'getUpdateResults',
'update_last_run' => 'getUpdateLastRun',
'public_theme' => 'getPublicTheme',
'hide_album_art' => 'getHideAlbumArt',
'homepage_redirect_url' => 'getHomepageRedirectUrl',
'default_album_art_url' => 'getDefaultAlbumArtUrl',
'use_external_album_art_when_processing_media' => 'getUseExternalAlbumArtWhenProcessingMedia',
'use_external_album_art_in_apis' => 'getUseExternalAlbumArtInApis',
'last_fm_api_key' => 'getLastFmApiKey',
'hide_product_name' => 'getHideProductName',
'public_custom_css' => 'getPublicCustomCss',
'public_custom_js' => 'getPublicCustomJs',
'internal_custom_css' => 'getInternalCustomCss',
'backup_enabled' => 'getBackupEnabled',
'backup_time_code' => 'getBackupTimeCode',
'backup_exclude_media' => 'getBackupExcludeMedia',
'backup_keep_copies' => 'getBackupKeepCopies',
'backup_storage_location' => 'getBackupStorageLocation',
'backup_format' => 'getBackupFormat',
'backup_last_run' => 'getBackupLastRun',
'backup_last_output' => 'getBackupLastOutput',
'setup_complete_time' => 'getSetupCompleteTime',
'sync_disabled' => 'getSyncDisabled',
'sync_last_run' => 'getSyncLastRun',
'external_ip' => 'getExternalIp',
'geolite_license_key' => 'getGeoliteLicenseKey',
'geolite_last_run' => 'getGeoliteLastRun',
'enable_advanced_features' => 'getEnableAdvancedFeatures',
'mail_enabled' => 'getMailEnabled',
'mail_sender_name' => 'getMailSenderName',
'mail_sender_email' => 'getMailSenderEmail',
'mail_smtp_host' => 'getMailSmtpHost',
'mail_smtp_port' => 'getMailSmtpPort',
'mail_smtp_username' => 'getMailSmtpUsername',
'mail_smtp_password' => 'getMailSmtpPassword',
'mail_smtp_secure' => 'getMailSmtpSecure',
'avatar_service' => 'getAvatarService',
'avatar_default_url' => 'getAvatarDefaultUrl',
'acme_email' => 'getAcmeEmail',
'acme_domains' => 'getAcmeDomains'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['app_unique_identifier'] = isset($data['app_unique_identifier']) ? $data['app_unique_identifier'] : null;
        $this->container['base_url'] = isset($data['base_url']) ? $data['base_url'] : null;
        $this->container['instance_name'] = isset($data['instance_name']) ? $data['instance_name'] : null;
        $this->container['prefer_browser_url'] = isset($data['prefer_browser_url']) ? $data['prefer_browser_url'] : null;
        $this->container['use_radio_proxy'] = isset($data['use_radio_proxy']) ? $data['use_radio_proxy'] : null;
        $this->container['history_keep_days'] = isset($data['history_keep_days']) ? $data['history_keep_days'] : null;
        $this->container['always_use_ssl'] = isset($data['always_use_ssl']) ? $data['always_use_ssl'] : null;
        $this->container['api_access_control'] = isset($data['api_access_control']) ? $data['api_access_control'] : null;
        $this->container['enable_static_nowplaying'] = isset($data['enable_static_nowplaying']) ? $data['enable_static_nowplaying'] : null;
        $this->container['analytics'] = isset($data['analytics']) ? $data['analytics'] : null;
        $this->container['check_for_updates'] = isset($data['check_for_updates']) ? $data['check_for_updates'] : null;
        $this->container['update_results'] = isset($data['update_results']) ? $data['update_results'] : null;
        $this->container['update_last_run'] = isset($data['update_last_run']) ? $data['update_last_run'] : null;
        $this->container['public_theme'] = isset($data['public_theme']) ? $data['public_theme'] : null;
        $this->container['hide_album_art'] = isset($data['hide_album_art']) ? $data['hide_album_art'] : null;
        $this->container['homepage_redirect_url'] = isset($data['homepage_redirect_url']) ? $data['homepage_redirect_url'] : null;
        $this->container['default_album_art_url'] = isset($data['default_album_art_url']) ? $data['default_album_art_url'] : null;
        $this->container['use_external_album_art_when_processing_media'] = isset($data['use_external_album_art_when_processing_media']) ? $data['use_external_album_art_when_processing_media'] : null;
        $this->container['use_external_album_art_in_apis'] = isset($data['use_external_album_art_in_apis']) ? $data['use_external_album_art_in_apis'] : null;
        $this->container['last_fm_api_key'] = isset($data['last_fm_api_key']) ? $data['last_fm_api_key'] : null;
        $this->container['hide_product_name'] = isset($data['hide_product_name']) ? $data['hide_product_name'] : null;
        $this->container['public_custom_css'] = isset($data['public_custom_css']) ? $data['public_custom_css'] : null;
        $this->container['public_custom_js'] = isset($data['public_custom_js']) ? $data['public_custom_js'] : null;
        $this->container['internal_custom_css'] = isset($data['internal_custom_css']) ? $data['internal_custom_css'] : null;
        $this->container['backup_enabled'] = isset($data['backup_enabled']) ? $data['backup_enabled'] : null;
        $this->container['backup_time_code'] = isset($data['backup_time_code']) ? $data['backup_time_code'] : null;
        $this->container['backup_exclude_media'] = isset($data['backup_exclude_media']) ? $data['backup_exclude_media'] : null;
        $this->container['backup_keep_copies'] = isset($data['backup_keep_copies']) ? $data['backup_keep_copies'] : null;
        $this->container['backup_storage_location'] = isset($data['backup_storage_location']) ? $data['backup_storage_location'] : null;
        $this->container['backup_format'] = isset($data['backup_format']) ? $data['backup_format'] : null;
        $this->container['backup_last_run'] = isset($data['backup_last_run']) ? $data['backup_last_run'] : null;
        $this->container['backup_last_output'] = isset($data['backup_last_output']) ? $data['backup_last_output'] : null;
        $this->container['setup_complete_time'] = isset($data['setup_complete_time']) ? $data['setup_complete_time'] : null;
        $this->container['sync_disabled'] = isset($data['sync_disabled']) ? $data['sync_disabled'] : null;
        $this->container['sync_last_run'] = isset($data['sync_last_run']) ? $data['sync_last_run'] : null;
        $this->container['external_ip'] = isset($data['external_ip']) ? $data['external_ip'] : null;
        $this->container['geolite_license_key'] = isset($data['geolite_license_key']) ? $data['geolite_license_key'] : null;
        $this->container['geolite_last_run'] = isset($data['geolite_last_run']) ? $data['geolite_last_run'] : null;
        $this->container['enable_advanced_features'] = isset($data['enable_advanced_features']) ? $data['enable_advanced_features'] : null;
        $this->container['mail_enabled'] = isset($data['mail_enabled']) ? $data['mail_enabled'] : null;
        $this->container['mail_sender_name'] = isset($data['mail_sender_name']) ? $data['mail_sender_name'] : null;
        $this->container['mail_sender_email'] = isset($data['mail_sender_email']) ? $data['mail_sender_email'] : null;
        $this->container['mail_smtp_host'] = isset($data['mail_smtp_host']) ? $data['mail_smtp_host'] : null;
        $this->container['mail_smtp_port'] = isset($data['mail_smtp_port']) ? $data['mail_smtp_port'] : null;
        $this->container['mail_smtp_username'] = isset($data['mail_smtp_username']) ? $data['mail_smtp_username'] : null;
        $this->container['mail_smtp_password'] = isset($data['mail_smtp_password']) ? $data['mail_smtp_password'] : null;
        $this->container['mail_smtp_secure'] = isset($data['mail_smtp_secure']) ? $data['mail_smtp_secure'] : null;
        $this->container['avatar_service'] = isset($data['avatar_service']) ? $data['avatar_service'] : null;
        $this->container['avatar_default_url'] = isset($data['avatar_default_url']) ? $data['avatar_default_url'] : null;
        $this->container['acme_email'] = isset($data['acme_email']) ? $data['acme_email'] : null;
        $this->container['acme_domains'] = isset($data['acme_domains']) ? $data['acme_domains'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets app_unique_identifier
     *
     * @return string
     */
    public function getAppUniqueIdentifier()
    {
        return $this->container['app_unique_identifier'];
    }

    /**
     * Sets app_unique_identifier
     *
     * @param string $app_unique_identifier app_unique_identifier
     *
     * @return $this
     */
    public function setAppUniqueIdentifier($app_unique_identifier)
    {
        $this->container['app_unique_identifier'] = $app_unique_identifier;

        return $this;
    }

    /**
     * Gets base_url
     *
     * @return string
     */
    public function getBaseUrl()
    {
        return $this->container['base_url'];
    }

    /**
     * Sets base_url
     *
     * @param string $base_url Site Base URL
     *
     * @return $this
     */
    public function setBaseUrl($base_url)
    {
        $this->container['base_url'] = $base_url;

        return $this;
    }

    /**
     * Gets instance_name
     *
     * @return string
     */
    public function getInstanceName()
    {
        return $this->container['instance_name'];
    }

    /**
     * Sets instance_name
     *
     * @param string $instance_name AzuraCast Instance Name
     *
     * @return $this
     */
    public function setInstanceName($instance_name)
    {
        $this->container['instance_name'] = $instance_name;

        return $this;
    }

    /**
     * Gets prefer_browser_url
     *
     * @return bool
     */
    public function getPreferBrowserUrl()
    {
        return $this->container['prefer_browser_url'];
    }

    /**
     * Sets prefer_browser_url
     *
     * @param bool $prefer_browser_url Prefer Browser URL (If Available)
     *
     * @return $this
     */
    public function setPreferBrowserUrl($prefer_browser_url)
    {
        $this->container['prefer_browser_url'] = $prefer_browser_url;

        return $this;
    }

    /**
     * Gets use_radio_proxy
     *
     * @return bool
     */
    public function getUseRadioProxy()
    {
        return $this->container['use_radio_proxy'];
    }

    /**
     * Sets use_radio_proxy
     *
     * @param bool $use_radio_proxy Use Web Proxy for Radio
     *
     * @return $this
     */
    public function setUseRadioProxy($use_radio_proxy)
    {
        $this->container['use_radio_proxy'] = $use_radio_proxy;

        return $this;
    }

    /**
     * Gets history_keep_days
     *
     * @return int
     */
    public function getHistoryKeepDays()
    {
        return $this->container['history_keep_days'];
    }

    /**
     * Sets history_keep_days
     *
     * @param int $history_keep_days Days of Playback History to Keep
     *
     * @return $this
     */
    public function setHistoryKeepDays($history_keep_days)
    {
        $this->container['history_keep_days'] = $history_keep_days;

        return $this;
    }

    /**
     * Gets always_use_ssl
     *
     * @return bool
     */
    public function getAlwaysUseSsl()
    {
        return $this->container['always_use_ssl'];
    }

    /**
     * Sets always_use_ssl
     *
     * @param bool $always_use_ssl Always Use HTTPS
     *
     * @return $this
     */
    public function setAlwaysUseSsl($always_use_ssl)
    {
        $this->container['always_use_ssl'] = $always_use_ssl;

        return $this;
    }

    /**
     * Gets api_access_control
     *
     * @return string
     */
    public function getApiAccessControl()
    {
        return $this->container['api_access_control'];
    }

    /**
     * Sets api_access_control
     *
     * @param string $api_access_control API 'Access-Control-Allow-Origin' header
     *
     * @return $this
     */
    public function setApiAccessControl($api_access_control)
    {
        $this->container['api_access_control'] = $api_access_control;

        return $this;
    }

    /**
     * Gets enable_static_nowplaying
     *
     * @return bool
     */
    public function getEnableStaticNowplaying()
    {
        return $this->container['enable_static_nowplaying'];
    }

    /**
     * Sets enable_static_nowplaying
     *
     * @param bool $enable_static_nowplaying Whether to use high-performance static JSON for Now Playing data updates.
     *
     * @return $this
     */
    public function setEnableStaticNowplaying($enable_static_nowplaying)
    {
        $this->container['enable_static_nowplaying'] = $enable_static_nowplaying;

        return $this;
    }

    /**
     * Gets analytics
     *
     * @return string
     */
    public function getAnalytics()
    {
        return $this->container['analytics'];
    }

    /**
     * Sets analytics
     *
     * @param string $analytics Listener Analytics Collection
     *
     * @return $this
     */
    public function setAnalytics($analytics)
    {
        $this->container['analytics'] = $analytics;

        return $this;
    }

    /**
     * Gets check_for_updates
     *
     * @return bool
     */
    public function getCheckForUpdates()
    {
        return $this->container['check_for_updates'];
    }

    /**
     * Sets check_for_updates
     *
     * @param bool $check_for_updates Check for Updates and Announcements
     *
     * @return $this
     */
    public function setCheckForUpdates($check_for_updates)
    {
        $this->container['check_for_updates'] = $check_for_updates;

        return $this;
    }

    /**
     * Gets update_results
     *
     * @return null[]
     */
    public function getUpdateResults()
    {
        return $this->container['update_results'];
    }

    /**
     * Sets update_results
     *
     * @param null[] $update_results Results of the latest update check.
     *
     * @return $this
     */
    public function setUpdateResults($update_results)
    {
        $this->container['update_results'] = $update_results;

        return $this;
    }

    /**
     * Gets update_last_run
     *
     * @return int
     */
    public function getUpdateLastRun()
    {
        return $this->container['update_last_run'];
    }

    /**
     * Sets update_last_run
     *
     * @param int $update_last_run The UNIX timestamp when updates were last checked.
     *
     * @return $this
     */
    public function setUpdateLastRun($update_last_run)
    {
        $this->container['update_last_run'] = $update_last_run;

        return $this;
    }

    /**
     * Gets public_theme
     *
     * @return string
     */
    public function getPublicTheme()
    {
        return $this->container['public_theme'];
    }

    /**
     * Sets public_theme
     *
     * @param string $public_theme Base Theme for Public Pages
     *
     * @return $this
     */
    public function setPublicTheme($public_theme)
    {
        $this->container['public_theme'] = $public_theme;

        return $this;
    }

    /**
     * Gets hide_album_art
     *
     * @return bool
     */
    public function getHideAlbumArt()
    {
        return $this->container['hide_album_art'];
    }

    /**
     * Sets hide_album_art
     *
     * @param bool $hide_album_art Hide Album Art on Public Pages
     *
     * @return $this
     */
    public function setHideAlbumArt($hide_album_art)
    {
        $this->container['hide_album_art'] = $hide_album_art;

        return $this;
    }

    /**
     * Gets homepage_redirect_url
     *
     * @return string
     */
    public function getHomepageRedirectUrl()
    {
        return $this->container['homepage_redirect_url'];
    }

    /**
     * Sets homepage_redirect_url
     *
     * @param string $homepage_redirect_url Homepage Redirect URL
     *
     * @return $this
     */
    public function setHomepageRedirectUrl($homepage_redirect_url)
    {
        $this->container['homepage_redirect_url'] = $homepage_redirect_url;

        return $this;
    }

    /**
     * Gets default_album_art_url
     *
     * @return string
     */
    public function getDefaultAlbumArtUrl()
    {
        return $this->container['default_album_art_url'];
    }

    /**
     * Sets default_album_art_url
     *
     * @param string $default_album_art_url Default Album Art URL
     *
     * @return $this
     */
    public function setDefaultAlbumArtUrl($default_album_art_url)
    {
        $this->container['default_album_art_url'] = $default_album_art_url;

        return $this;
    }

    /**
     * Gets use_external_album_art_when_processing_media
     *
     * @return bool
     */
    public function getUseExternalAlbumArtWhenProcessingMedia()
    {
        return $this->container['use_external_album_art_when_processing_media'];
    }

    /**
     * Sets use_external_album_art_when_processing_media
     *
     * @param bool $use_external_album_art_when_processing_media Attempt to fetch album art from external sources when processing media.
     *
     * @return $this
     */
    public function setUseExternalAlbumArtWhenProcessingMedia($use_external_album_art_when_processing_media)
    {
        $this->container['use_external_album_art_when_processing_media'] = $use_external_album_art_when_processing_media;

        return $this;
    }

    /**
     * Gets use_external_album_art_in_apis
     *
     * @return bool
     */
    public function getUseExternalAlbumArtInApis()
    {
        return $this->container['use_external_album_art_in_apis'];
    }

    /**
     * Sets use_external_album_art_in_apis
     *
     * @param bool $use_external_album_art_in_apis Attempt to fetch album art from external sources in API requests.
     *
     * @return $this
     */
    public function setUseExternalAlbumArtInApis($use_external_album_art_in_apis)
    {
        $this->container['use_external_album_art_in_apis'] = $use_external_album_art_in_apis;

        return $this;
    }

    /**
     * Gets last_fm_api_key
     *
     * @return string
     */
    public function getLastFmApiKey()
    {
        return $this->container['last_fm_api_key'];
    }

    /**
     * Sets last_fm_api_key
     *
     * @param string $last_fm_api_key An API key to connect to Last.fm services, if provided.
     *
     * @return $this
     */
    public function setLastFmApiKey($last_fm_api_key)
    {
        $this->container['last_fm_api_key'] = $last_fm_api_key;

        return $this;
    }

    /**
     * Gets hide_product_name
     *
     * @return bool
     */
    public function getHideProductName()
    {
        return $this->container['hide_product_name'];
    }

    /**
     * Sets hide_product_name
     *
     * @param bool $hide_product_name Hide AzuraCast Branding on Public Pages
     *
     * @return $this
     */
    public function setHideProductName($hide_product_name)
    {
        $this->container['hide_product_name'] = $hide_product_name;

        return $this;
    }

    /**
     * Gets public_custom_css
     *
     * @return string
     */
    public function getPublicCustomCss()
    {
        return $this->container['public_custom_css'];
    }

    /**
     * Sets public_custom_css
     *
     * @param string $public_custom_css Custom CSS for Public Pages
     *
     * @return $this
     */
    public function setPublicCustomCss($public_custom_css)
    {
        $this->container['public_custom_css'] = $public_custom_css;

        return $this;
    }

    /**
     * Gets public_custom_js
     *
     * @return string
     */
    public function getPublicCustomJs()
    {
        return $this->container['public_custom_js'];
    }

    /**
     * Sets public_custom_js
     *
     * @param string $public_custom_js Custom JS for Public Pages
     *
     * @return $this
     */
    public function setPublicCustomJs($public_custom_js)
    {
        $this->container['public_custom_js'] = $public_custom_js;

        return $this;
    }

    /**
     * Gets internal_custom_css
     *
     * @return string
     */
    public function getInternalCustomCss()
    {
        return $this->container['internal_custom_css'];
    }

    /**
     * Sets internal_custom_css
     *
     * @param string $internal_custom_css Custom CSS for Internal Pages
     *
     * @return $this
     */
    public function setInternalCustomCss($internal_custom_css)
    {
        $this->container['internal_custom_css'] = $internal_custom_css;

        return $this;
    }

    /**
     * Gets backup_enabled
     *
     * @return bool
     */
    public function getBackupEnabled()
    {
        return $this->container['backup_enabled'];
    }

    /**
     * Sets backup_enabled
     *
     * @param bool $backup_enabled Whether backup is enabled.
     *
     * @return $this
     */
    public function setBackupEnabled($backup_enabled)
    {
        $this->container['backup_enabled'] = $backup_enabled;

        return $this;
    }

    /**
     * Gets backup_time_code
     *
     * @return string
     */
    public function getBackupTimeCode()
    {
        return $this->container['backup_time_code'];
    }

    /**
     * Sets backup_time_code
     *
     * @param string $backup_time_code The timecode (i.e. 400 for 4:00AM) when automated backups should run.
     *
     * @return $this
     */
    public function setBackupTimeCode($backup_time_code)
    {
        $this->container['backup_time_code'] = $backup_time_code;

        return $this;
    }

    /**
     * Gets backup_exclude_media
     *
     * @return bool
     */
    public function getBackupExcludeMedia()
    {
        return $this->container['backup_exclude_media'];
    }

    /**
     * Sets backup_exclude_media
     *
     * @param bool $backup_exclude_media Whether to exclude media in automated backups.
     *
     * @return $this
     */
    public function setBackupExcludeMedia($backup_exclude_media)
    {
        $this->container['backup_exclude_media'] = $backup_exclude_media;

        return $this;
    }

    /**
     * Gets backup_keep_copies
     *
     * @return int
     */
    public function getBackupKeepCopies()
    {
        return $this->container['backup_keep_copies'];
    }

    /**
     * Sets backup_keep_copies
     *
     * @param int $backup_keep_copies Number of backups to keep, or infinite if zero/null.
     *
     * @return $this
     */
    public function setBackupKeepCopies($backup_keep_copies)
    {
        $this->container['backup_keep_copies'] = $backup_keep_copies;

        return $this;
    }

    /**
     * Gets backup_storage_location
     *
     * @return int
     */
    public function getBackupStorageLocation()
    {
        return $this->container['backup_storage_location'];
    }

    /**
     * Sets backup_storage_location
     *
     * @param int $backup_storage_location The storage location ID for automated backups.
     *
     * @return $this
     */
    public function setBackupStorageLocation($backup_storage_location)
    {
        $this->container['backup_storage_location'] = $backup_storage_location;

        return $this;
    }

    /**
     * Gets backup_format
     *
     * @return string
     */
    public function getBackupFormat()
    {
        return $this->container['backup_format'];
    }

    /**
     * Sets backup_format
     *
     * @param string $backup_format The output format for the automated backup.
     *
     * @return $this
     */
    public function setBackupFormat($backup_format)
    {
        $this->container['backup_format'] = $backup_format;

        return $this;
    }

    /**
     * Gets backup_last_run
     *
     * @return int
     */
    public function getBackupLastRun()
    {
        return $this->container['backup_last_run'];
    }

    /**
     * Sets backup_last_run
     *
     * @param int $backup_last_run The UNIX timestamp when automated backup was last run.
     *
     * @return $this
     */
    public function setBackupLastRun($backup_last_run)
    {
        $this->container['backup_last_run'] = $backup_last_run;

        return $this;
    }

    /**
     * Gets backup_last_output
     *
     * @return string
     */
    public function getBackupLastOutput()
    {
        return $this->container['backup_last_output'];
    }

    /**
     * Sets backup_last_output
     *
     * @param string $backup_last_output The output of the latest automated backup task.
     *
     * @return $this
     */
    public function setBackupLastOutput($backup_last_output)
    {
        $this->container['backup_last_output'] = $backup_last_output;

        return $this;
    }

    /**
     * Gets setup_complete_time
     *
     * @return int
     */
    public function getSetupCompleteTime()
    {
        return $this->container['setup_complete_time'];
    }

    /**
     * Sets setup_complete_time
     *
     * @param int $setup_complete_time The UNIX timestamp when setup was last completed.
     *
     * @return $this
     */
    public function setSetupCompleteTime($setup_complete_time)
    {
        $this->container['setup_complete_time'] = $setup_complete_time;

        return $this;
    }

    /**
     * Gets sync_disabled
     *
     * @return bool
     */
    public function getSyncDisabled()
    {
        return $this->container['sync_disabled'];
    }

    /**
     * Sets sync_disabled
     *
     * @param bool $sync_disabled Temporarily disable all sync tasks.
     *
     * @return $this
     */
    public function setSyncDisabled($sync_disabled)
    {
        $this->container['sync_disabled'] = $sync_disabled;

        return $this;
    }

    /**
     * Gets sync_last_run
     *
     * @return int
     */
    public function getSyncLastRun()
    {
        return $this->container['sync_last_run'];
    }

    /**
     * Sets sync_last_run
     *
     * @param int $sync_last_run The last run timestamp for the unified sync task.
     *
     * @return $this
     */
    public function setSyncLastRun($sync_last_run)
    {
        $this->container['sync_last_run'] = $sync_last_run;

        return $this;
    }

    /**
     * Gets external_ip
     *
     * @return string
     */
    public function getExternalIp()
    {
        return $this->container['external_ip'];
    }

    /**
     * Sets external_ip
     *
     * @param string $external_ip This installation's external IP.
     *
     * @return $this
     */
    public function setExternalIp($external_ip)
    {
        $this->container['external_ip'] = $external_ip;

        return $this;
    }

    /**
     * Gets geolite_license_key
     *
     * @return string
     */
    public function getGeoliteLicenseKey()
    {
        return $this->container['geolite_license_key'];
    }

    /**
     * Sets geolite_license_key
     *
     * @param string $geolite_license_key The license key for the Maxmind Geolite download.
     *
     * @return $this
     */
    public function setGeoliteLicenseKey($geolite_license_key)
    {
        $this->container['geolite_license_key'] = $geolite_license_key;

        return $this;
    }

    /**
     * Gets geolite_last_run
     *
     * @return int
     */
    public function getGeoliteLastRun()
    {
        return $this->container['geolite_last_run'];
    }

    /**
     * Sets geolite_last_run
     *
     * @param int $geolite_last_run The UNIX timestamp when the Maxmind Geolite was last downloaded.
     *
     * @return $this
     */
    public function setGeoliteLastRun($geolite_last_run)
    {
        $this->container['geolite_last_run'] = $geolite_last_run;

        return $this;
    }

    /**
     * Gets enable_advanced_features
     *
     * @return bool
     */
    public function getEnableAdvancedFeatures()
    {
        return $this->container['enable_advanced_features'];
    }

    /**
     * Sets enable_advanced_features
     *
     * @param bool $enable_advanced_features Whether to enable 'advanced' functionality in the system that is intended for power users.
     *
     * @return $this
     */
    public function setEnableAdvancedFeatures($enable_advanced_features)
    {
        $this->container['enable_advanced_features'] = $enable_advanced_features;

        return $this;
    }

    /**
     * Gets mail_enabled
     *
     * @return bool
     */
    public function getMailEnabled()
    {
        return $this->container['mail_enabled'];
    }

    /**
     * Sets mail_enabled
     *
     * @param bool $mail_enabled Enable e-mail delivery across the application.
     *
     * @return $this
     */
    public function setMailEnabled($mail_enabled)
    {
        $this->container['mail_enabled'] = $mail_enabled;

        return $this;
    }

    /**
     * Gets mail_sender_name
     *
     * @return string
     */
    public function getMailSenderName()
    {
        return $this->container['mail_sender_name'];
    }

    /**
     * Sets mail_sender_name
     *
     * @param string $mail_sender_name The name of the sender of system e-mails.
     *
     * @return $this
     */
    public function setMailSenderName($mail_sender_name)
    {
        $this->container['mail_sender_name'] = $mail_sender_name;

        return $this;
    }

    /**
     * Gets mail_sender_email
     *
     * @return string
     */
    public function getMailSenderEmail()
    {
        return $this->container['mail_sender_email'];
    }

    /**
     * Sets mail_sender_email
     *
     * @param string $mail_sender_email The e-mail address of the sender of system e-mails.
     *
     * @return $this
     */
    public function setMailSenderEmail($mail_sender_email)
    {
        $this->container['mail_sender_email'] = $mail_sender_email;

        return $this;
    }

    /**
     * Gets mail_smtp_host
     *
     * @return string
     */
    public function getMailSmtpHost()
    {
        return $this->container['mail_smtp_host'];
    }

    /**
     * Sets mail_smtp_host
     *
     * @param string $mail_smtp_host The host to send outbound SMTP mail.
     *
     * @return $this
     */
    public function setMailSmtpHost($mail_smtp_host)
    {
        $this->container['mail_smtp_host'] = $mail_smtp_host;

        return $this;
    }

    /**
     * Gets mail_smtp_port
     *
     * @return int
     */
    public function getMailSmtpPort()
    {
        return $this->container['mail_smtp_port'];
    }

    /**
     * Sets mail_smtp_port
     *
     * @param int $mail_smtp_port The port for sending outbound SMTP mail.
     *
     * @return $this
     */
    public function setMailSmtpPort($mail_smtp_port)
    {
        $this->container['mail_smtp_port'] = $mail_smtp_port;

        return $this;
    }

    /**
     * Gets mail_smtp_username
     *
     * @return string
     */
    public function getMailSmtpUsername()
    {
        return $this->container['mail_smtp_username'];
    }

    /**
     * Sets mail_smtp_username
     *
     * @param string $mail_smtp_username The username when connecting to SMTP mail.
     *
     * @return $this
     */
    public function setMailSmtpUsername($mail_smtp_username)
    {
        $this->container['mail_smtp_username'] = $mail_smtp_username;

        return $this;
    }

    /**
     * Gets mail_smtp_password
     *
     * @return string
     */
    public function getMailSmtpPassword()
    {
        return $this->container['mail_smtp_password'];
    }

    /**
     * Sets mail_smtp_password
     *
     * @param string $mail_smtp_password The password when connecting to SMTP mail.
     *
     * @return $this
     */
    public function setMailSmtpPassword($mail_smtp_password)
    {
        $this->container['mail_smtp_password'] = $mail_smtp_password;

        return $this;
    }

    /**
     * Gets mail_smtp_secure
     *
     * @return bool
     */
    public function getMailSmtpSecure()
    {
        return $this->container['mail_smtp_secure'];
    }

    /**
     * Sets mail_smtp_secure
     *
     * @param bool $mail_smtp_secure Whether to use a secure (TLS) connection when sending SMTP mail.
     *
     * @return $this
     */
    public function setMailSmtpSecure($mail_smtp_secure)
    {
        $this->container['mail_smtp_secure'] = $mail_smtp_secure;

        return $this;
    }

    /**
     * Gets avatar_service
     *
     * @return string
     */
    public function getAvatarService()
    {
        return $this->container['avatar_service'];
    }

    /**
     * Sets avatar_service
     *
     * @param string $avatar_service The external avatar service to use when fetching avatars.
     *
     * @return $this
     */
    public function setAvatarService($avatar_service)
    {
        $this->container['avatar_service'] = $avatar_service;

        return $this;
    }

    /**
     * Gets avatar_default_url
     *
     * @return string
     */
    public function getAvatarDefaultUrl()
    {
        return $this->container['avatar_default_url'];
    }

    /**
     * Sets avatar_default_url
     *
     * @param string $avatar_default_url The default avatar URL.
     *
     * @return $this
     */
    public function setAvatarDefaultUrl($avatar_default_url)
    {
        $this->container['avatar_default_url'] = $avatar_default_url;

        return $this;
    }

    /**
     * Gets acme_email
     *
     * @return string
     */
    public function getAcmeEmail()
    {
        return $this->container['acme_email'];
    }

    /**
     * Sets acme_email
     *
     * @param string $acme_email ACME (LetsEncrypt) e-mail address.
     *
     * @return $this
     */
    public function setAcmeEmail($acme_email)
    {
        $this->container['acme_email'] = $acme_email;

        return $this;
    }

    /**
     * Gets acme_domains
     *
     * @return string
     */
    public function getAcmeDomains()
    {
        return $this->container['acme_domains'];
    }

    /**
     * Sets acme_domains
     *
     * @param string $acme_domains ACME (LetsEncrypt) domain name(s).
     *
     * @return $this
     */
    public function setAcmeDomains($acme_domains)
    {
        $this->container['acme_domains'] = $acme_domains;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
