<?php
/**
 * ApiPodcast
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * OpenAPI spec version: 0.17.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ApiPodcast Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApiPodcast extends HasLinks 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Api_Podcast';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'storage_location_id' => 'int',
'title' => 'string',
'link' => 'string',
'description' => 'string',
'language' => 'string',
'author' => 'string',
'email' => 'string',
'has_custom_art' => 'bool',
'art' => 'string',
'art_updated_at' => 'int',
'categories' => 'string[]',
'episodes' => 'string[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'storage_location_id' => null,
'title' => null,
'link' => null,
'description' => null,
'language' => null,
'author' => null,
'email' => null,
'has_custom_art' => null,
'art' => null,
'art_updated_at' => null,
'categories' => null,
'episodes' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'storage_location_id' => 'storage_location_id',
'title' => 'title',
'link' => 'link',
'description' => 'description',
'language' => 'language',
'author' => 'author',
'email' => 'email',
'has_custom_art' => 'has_custom_art',
'art' => 'art',
'art_updated_at' => 'art_updated_at',
'categories' => 'categories',
'episodes' => 'episodes'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'storage_location_id' => 'setStorageLocationId',
'title' => 'setTitle',
'link' => 'setLink',
'description' => 'setDescription',
'language' => 'setLanguage',
'author' => 'setAuthor',
'email' => 'setEmail',
'has_custom_art' => 'setHasCustomArt',
'art' => 'setArt',
'art_updated_at' => 'setArtUpdatedAt',
'categories' => 'setCategories',
'episodes' => 'setEpisodes'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'storage_location_id' => 'getStorageLocationId',
'title' => 'getTitle',
'link' => 'getLink',
'description' => 'getDescription',
'language' => 'getLanguage',
'author' => 'getAuthor',
'email' => 'getEmail',
'has_custom_art' => 'getHasCustomArt',
'art' => 'getArt',
'art_updated_at' => 'getArtUpdatedAt',
'categories' => 'getCategories',
'episodes' => 'getEpisodes'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['storage_location_id'] = isset($data['storage_location_id']) ? $data['storage_location_id'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['author'] = isset($data['author']) ? $data['author'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['has_custom_art'] = isset($data['has_custom_art']) ? $data['has_custom_art'] : null;
        $this->container['art'] = isset($data['art']) ? $data['art'] : null;
        $this->container['art_updated_at'] = isset($data['art_updated_at']) ? $data['art_updated_at'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['episodes'] = isset($data['episodes']) ? $data['episodes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets storage_location_id
     *
     * @return int
     */
    public function getStorageLocationId()
    {
        return $this->container['storage_location_id'];
    }

    /**
     * Sets storage_location_id
     *
     * @param int $storage_location_id storage_location_id
     *
     * @return $this
     */
    public function setStorageLocationId($storage_location_id)
    {
        $this->container['storage_location_id'] = $storage_location_id;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title title
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string $link link
     *
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets language
     *
     * @return string
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param string $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets author
     *
     * @return string
     */
    public function getAuthor()
    {
        return $this->container['author'];
    }

    /**
     * Sets author
     *
     * @param string $author author
     *
     * @return $this
     */
    public function setAuthor($author)
    {
        $this->container['author'] = $author;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets has_custom_art
     *
     * @return bool
     */
    public function getHasCustomArt()
    {
        return $this->container['has_custom_art'];
    }

    /**
     * Sets has_custom_art
     *
     * @param bool $has_custom_art has_custom_art
     *
     * @return $this
     */
    public function setHasCustomArt($has_custom_art)
    {
        $this->container['has_custom_art'] = $has_custom_art;

        return $this;
    }

    /**
     * Gets art
     *
     * @return string
     */
    public function getArt()
    {
        return $this->container['art'];
    }

    /**
     * Sets art
     *
     * @param string $art art
     *
     * @return $this
     */
    public function setArt($art)
    {
        $this->container['art'] = $art;

        return $this;
    }

    /**
     * Gets art_updated_at
     *
     * @return int
     */
    public function getArtUpdatedAt()
    {
        return $this->container['art_updated_at'];
    }

    /**
     * Sets art_updated_at
     *
     * @param int $art_updated_at art_updated_at
     *
     * @return $this
     */
    public function setArtUpdatedAt($art_updated_at)
    {
        $this->container['art_updated_at'] = $art_updated_at;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[] $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets episodes
     *
     * @return string[]
     */
    public function getEpisodes()
    {
        return $this->container['episodes'];
    }

    /**
     * Sets episodes
     *
     * @param string[] $episodes episodes
     *
     * @return $this
     */
    public function setEpisodes($episodes)
    {
        $this->container['episodes'] = $episodes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
