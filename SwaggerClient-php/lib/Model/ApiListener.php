<?php
/**
 * ApiListener
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * OpenAPI spec version: 0.17.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ApiListener Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApiListener implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Api_Listener';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'ip' => 'string',
'user_agent' => 'string',
'hash' => 'string',
'mount_is_local' => 'bool',
'mount_name' => 'string',
'connected_on' => 'int',
'connected_until' => 'int',
'connected_time' => 'int',
'device' => 'null[]',
'location' => 'null[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'ip' => null,
'user_agent' => null,
'hash' => null,
'mount_is_local' => null,
'mount_name' => null,
'connected_on' => null,
'connected_until' => null,
'connected_time' => null,
'device' => null,
'location' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'ip' => 'ip',
'user_agent' => 'user_agent',
'hash' => 'hash',
'mount_is_local' => 'mount_is_local',
'mount_name' => 'mount_name',
'connected_on' => 'connected_on',
'connected_until' => 'connected_until',
'connected_time' => 'connected_time',
'device' => 'device',
'location' => 'location'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'ip' => 'setIp',
'user_agent' => 'setUserAgent',
'hash' => 'setHash',
'mount_is_local' => 'setMountIsLocal',
'mount_name' => 'setMountName',
'connected_on' => 'setConnectedOn',
'connected_until' => 'setConnectedUntil',
'connected_time' => 'setConnectedTime',
'device' => 'setDevice',
'location' => 'setLocation'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'ip' => 'getIp',
'user_agent' => 'getUserAgent',
'hash' => 'getHash',
'mount_is_local' => 'getMountIsLocal',
'mount_name' => 'getMountName',
'connected_on' => 'getConnectedOn',
'connected_until' => 'getConnectedUntil',
'connected_time' => 'getConnectedTime',
'device' => 'getDevice',
'location' => 'getLocation'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['ip'] = isset($data['ip']) ? $data['ip'] : null;
        $this->container['user_agent'] = isset($data['user_agent']) ? $data['user_agent'] : null;
        $this->container['hash'] = isset($data['hash']) ? $data['hash'] : null;
        $this->container['mount_is_local'] = isset($data['mount_is_local']) ? $data['mount_is_local'] : null;
        $this->container['mount_name'] = isset($data['mount_name']) ? $data['mount_name'] : null;
        $this->container['connected_on'] = isset($data['connected_on']) ? $data['connected_on'] : null;
        $this->container['connected_until'] = isset($data['connected_until']) ? $data['connected_until'] : null;
        $this->container['connected_time'] = isset($data['connected_time']) ? $data['connected_time'] : null;
        $this->container['device'] = isset($data['device']) ? $data['device'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets ip
     *
     * @return string
     */
    public function getIp()
    {
        return $this->container['ip'];
    }

    /**
     * Sets ip
     *
     * @param string $ip The listener's IP address
     *
     * @return $this
     */
    public function setIp($ip)
    {
        $this->container['ip'] = $ip;

        return $this;
    }

    /**
     * Gets user_agent
     *
     * @return string
     */
    public function getUserAgent()
    {
        return $this->container['user_agent'];
    }

    /**
     * Sets user_agent
     *
     * @param string $user_agent The listener's HTTP User-Agent
     *
     * @return $this
     */
    public function setUserAgent($user_agent)
    {
        $this->container['user_agent'] = $user_agent;

        return $this;
    }

    /**
     * Gets hash
     *
     * @return string
     */
    public function getHash()
    {
        return $this->container['hash'];
    }

    /**
     * Sets hash
     *
     * @param string $hash A unique identifier for this listener/user agent (used for unique calculations).
     *
     * @return $this
     */
    public function setHash($hash)
    {
        $this->container['hash'] = $hash;

        return $this;
    }

    /**
     * Gets mount_is_local
     *
     * @return bool
     */
    public function getMountIsLocal()
    {
        return $this->container['mount_is_local'];
    }

    /**
     * Sets mount_is_local
     *
     * @param bool $mount_is_local Whether the user is connected to a local mount point or a remote one.
     *
     * @return $this
     */
    public function setMountIsLocal($mount_is_local)
    {
        $this->container['mount_is_local'] = $mount_is_local;

        return $this;
    }

    /**
     * Gets mount_name
     *
     * @return string
     */
    public function getMountName()
    {
        return $this->container['mount_name'];
    }

    /**
     * Sets mount_name
     *
     * @param string $mount_name The display name of the mount point.
     *
     * @return $this
     */
    public function setMountName($mount_name)
    {
        $this->container['mount_name'] = $mount_name;

        return $this;
    }

    /**
     * Gets connected_on
     *
     * @return int
     */
    public function getConnectedOn()
    {
        return $this->container['connected_on'];
    }

    /**
     * Sets connected_on
     *
     * @param int $connected_on UNIX timestamp that the user first connected.
     *
     * @return $this
     */
    public function setConnectedOn($connected_on)
    {
        $this->container['connected_on'] = $connected_on;

        return $this;
    }

    /**
     * Gets connected_until
     *
     * @return int
     */
    public function getConnectedUntil()
    {
        return $this->container['connected_until'];
    }

    /**
     * Sets connected_until
     *
     * @param int $connected_until UNIX timestamp that the user disconnected (or the latest timestamp if they are still connected).
     *
     * @return $this
     */
    public function setConnectedUntil($connected_until)
    {
        $this->container['connected_until'] = $connected_until;

        return $this;
    }

    /**
     * Gets connected_time
     *
     * @return int
     */
    public function getConnectedTime()
    {
        return $this->container['connected_time'];
    }

    /**
     * Sets connected_time
     *
     * @param int $connected_time Number of seconds that the user has been connected.
     *
     * @return $this
     */
    public function setConnectedTime($connected_time)
    {
        $this->container['connected_time'] = $connected_time;

        return $this;
    }

    /**
     * Gets device
     *
     * @return null[]
     */
    public function getDevice()
    {
        return $this->container['device'];
    }

    /**
     * Sets device
     *
     * @param null[] $device Device metadata, if available
     *
     * @return $this
     */
    public function setDevice($device)
    {
        $this->container['device'] = $device;

        return $this;
    }

    /**
     * Gets location
     *
     * @return null[]
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param null[] $location Location metadata, if available
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
