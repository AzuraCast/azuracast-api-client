<?php
/**
 * ApiStationQueueDetailed
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * OpenAPI spec version: 0.17.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;
use \Swagger\Client\ObjectSerializer;

/**
 * ApiStationQueueDetailed Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ApiStationQueueDetailed extends ApiNowPlayingStationQueue 
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Api_StationQueueDetailed';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'links' => 'string[]',
'sent_to_autodj' => 'bool',
'is_played' => 'bool',
'autodj_custom_uri' => 'string',
'log' => 'null[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'links' => null,
'sent_to_autodj' => null,
'is_played' => null,
'autodj_custom_uri' => null,
'log' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes + parent::swaggerTypes();
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats + parent::swaggerFormats();
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'links' => 'links',
'sent_to_autodj' => 'sent_to_autodj',
'is_played' => 'is_played',
'autodj_custom_uri' => 'autodj_custom_uri',
'log' => 'log'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'links' => 'setLinks',
'sent_to_autodj' => 'setSentToAutodj',
'is_played' => 'setIsPlayed',
'autodj_custom_uri' => 'setAutodjCustomUri',
'log' => 'setLog'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'links' => 'getLinks',
'sent_to_autodj' => 'getSentToAutodj',
'is_played' => 'getIsPlayed',
'autodj_custom_uri' => 'getAutodjCustomUri',
'log' => 'getLog'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return parent::attributeMap() + self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return parent::setters() + self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return parent::getters() + self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    


    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        parent::__construct($data);

        $this->container['links'] = isset($data['links']) ? $data['links'] : null;
        $this->container['sent_to_autodj'] = isset($data['sent_to_autodj']) ? $data['sent_to_autodj'] : null;
        $this->container['is_played'] = isset($data['is_played']) ? $data['is_played'] : null;
        $this->container['autodj_custom_uri'] = isset($data['autodj_custom_uri']) ? $data['autodj_custom_uri'] : null;
        $this->container['log'] = isset($data['log']) ? $data['log'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets links
     *
     * @return string[]
     */
    public function getLinks()
    {
        return $this->container['links'];
    }

    /**
     * Sets links
     *
     * @param string[] $links links
     *
     * @return $this
     */
    public function setLinks($links)
    {
        $this->container['links'] = $links;

        return $this;
    }

    /**
     * Gets sent_to_autodj
     *
     * @return bool
     */
    public function getSentToAutodj()
    {
        return $this->container['sent_to_autodj'];
    }

    /**
     * Sets sent_to_autodj
     *
     * @param bool $sent_to_autodj Indicates whether the song has been sent to the AutoDJ.
     *
     * @return $this
     */
    public function setSentToAutodj($sent_to_autodj)
    {
        $this->container['sent_to_autodj'] = $sent_to_autodj;

        return $this;
    }

    /**
     * Gets is_played
     *
     * @return bool
     */
    public function getIsPlayed()
    {
        return $this->container['is_played'];
    }

    /**
     * Sets is_played
     *
     * @param bool $is_played Indicates whether the song has already been marked as played.
     *
     * @return $this
     */
    public function setIsPlayed($is_played)
    {
        $this->container['is_played'] = $is_played;

        return $this;
    }

    /**
     * Gets autodj_custom_uri
     *
     * @return string
     */
    public function getAutodjCustomUri()
    {
        return $this->container['autodj_custom_uri'];
    }

    /**
     * Sets autodj_custom_uri
     *
     * @param string $autodj_custom_uri Custom AutoDJ playback URI, if it exists.
     *
     * @return $this
     */
    public function setAutodjCustomUri($autodj_custom_uri)
    {
        $this->container['autodj_custom_uri'] = $autodj_custom_uri;

        return $this;
    }

    /**
     * Gets log
     *
     * @return null[]
     */
    public function getLog()
    {
        return $this->container['log'];
    }

    /**
     * Sets log
     *
     * @param null[] $log Log entries on how the specific queue item was picked by the AutoDJ.
     *
     * @return $this
     */
    public function setLog($log)
    {
        $this->container['log'] = $log;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    #[\ReturnTypeWillChange] 
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    #[\ReturnTypeWillChange] 
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    #[\ReturnTypeWillChange] 
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
