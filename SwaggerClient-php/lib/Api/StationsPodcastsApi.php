<?php
/**
 * StationsPodcastsApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * AzuraCast
 *
 * AzuraCast is a standalone, turnkey web radio management tool. Radio stations hosted by AzuraCast expose a public API for viewing now playing data, making requests and more.
 *
 * OpenAPI spec version: 0.17.4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.36
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * StationsPodcastsApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class StationsPodcastsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation addEpisode
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  \Swagger\Client\Model\ApiPodcastEpisode $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiPodcastEpisode
     */
    public function addEpisode($station_id_required, $podcast_id, $body = null)
    {
        list($response) = $this->addEpisodeWithHttpInfo($station_id_required, $podcast_id, $body);
        return $response;
    }

    /**
     * Operation addEpisodeWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  \Swagger\Client\Model\ApiPodcastEpisode $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiPodcastEpisode, HTTP status code, HTTP response headers (array of strings)
     */
    public function addEpisodeWithHttpInfo($station_id_required, $podcast_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ApiPodcastEpisode';
        $request = $this->addEpisodeRequest($station_id_required, $podcast_id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiPodcastEpisode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addEpisodeAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  \Swagger\Client\Model\ApiPodcastEpisode $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEpisodeAsync($station_id_required, $podcast_id, $body = null)
    {
        return $this->addEpisodeAsyncWithHttpInfo($station_id_required, $podcast_id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addEpisodeAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  \Swagger\Client\Model\ApiPodcastEpisode $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addEpisodeAsyncWithHttpInfo($station_id_required, $podcast_id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ApiPodcastEpisode';
        $request = $this->addEpisodeRequest($station_id_required, $podcast_id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addEpisode'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  \Swagger\Client\Model\ApiPodcastEpisode $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addEpisodeRequest($station_id_required, $podcast_id, $body = null)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling addEpisode'
            );
        }
        // verify the required parameter 'podcast_id' is set
        if ($podcast_id === null || (is_array($podcast_id) && count($podcast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $podcast_id when calling addEpisode'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{podcast_id}/episodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($podcast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'podcast_id' . '}',
                ObjectSerializer::toPathValue($podcast_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation addPodcast
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  \Swagger\Client\Model\ApiPodcast $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiPodcast
     */
    public function addPodcast($station_id_required, $body = null)
    {
        list($response) = $this->addPodcastWithHttpInfo($station_id_required, $body);
        return $response;
    }

    /**
     * Operation addPodcastWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  \Swagger\Client\Model\ApiPodcast $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiPodcast, HTTP status code, HTTP response headers (array of strings)
     */
    public function addPodcastWithHttpInfo($station_id_required, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ApiPodcast';
        $request = $this->addPodcastRequest($station_id_required, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiPodcast',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation addPodcastAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  \Swagger\Client\Model\ApiPodcast $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPodcastAsync($station_id_required, $body = null)
    {
        return $this->addPodcastAsyncWithHttpInfo($station_id_required, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation addPodcastAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  \Swagger\Client\Model\ApiPodcast $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function addPodcastAsyncWithHttpInfo($station_id_required, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ApiPodcast';
        $request = $this->addPodcastRequest($station_id_required, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'addPodcast'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  \Swagger\Client\Model\ApiPodcast $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function addPodcastRequest($station_id_required, $body = null)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling addPodcast'
            );
        }

        $resourcePath = '/station/{station_id}/podcasts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deleteEpisode
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiStatus
     */
    public function deleteEpisode($station_id_required, $podcast_id, $id)
    {
        list($response) = $this->deleteEpisodeWithHttpInfo($station_id_required, $podcast_id, $id);
        return $response;
    }

    /**
     * Operation deleteEpisodeWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteEpisodeWithHttpInfo($station_id_required, $podcast_id, $id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->deleteEpisodeRequest($station_id_required, $podcast_id, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deleteEpisodeAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEpisodeAsync($station_id_required, $podcast_id, $id)
    {
        return $this->deleteEpisodeAsyncWithHttpInfo($station_id_required, $podcast_id, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteEpisodeAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteEpisodeAsyncWithHttpInfo($station_id_required, $podcast_id, $id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->deleteEpisodeRequest($station_id_required, $podcast_id, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteEpisode'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deleteEpisodeRequest($station_id_required, $podcast_id, $id)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling deleteEpisode'
            );
        }
        // verify the required parameter 'podcast_id' is set
        if ($podcast_id === null || (is_array($podcast_id) && count($podcast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $podcast_id when calling deleteEpisode'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deleteEpisode'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{podcast_id}/episode/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($podcast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'podcast_id' . '}',
                ObjectSerializer::toPathValue($podcast_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation deletePodcast
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $id Podcast ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiStatus
     */
    public function deletePodcast($station_id_required, $id)
    {
        list($response) = $this->deletePodcastWithHttpInfo($station_id_required, $id);
        return $response;
    }

    /**
     * Operation deletePodcastWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $id Podcast ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function deletePodcastWithHttpInfo($station_id_required, $id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->deletePodcastRequest($station_id_required, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation deletePodcastAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePodcastAsync($station_id_required, $id)
    {
        return $this->deletePodcastAsyncWithHttpInfo($station_id_required, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deletePodcastAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deletePodcastAsyncWithHttpInfo($station_id_required, $id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->deletePodcastRequest($station_id_required, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deletePodcast'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function deletePodcastRequest($station_id_required, $id)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling deletePodcast'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling deletePodcast'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editEpisode
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $id Podcast Episode ID (required)
     * @param  \Swagger\Client\Model\ApiPodcastEpisode $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiStatus
     */
    public function editEpisode($station_id_required, $podcast_id, $id, $body = null)
    {
        list($response) = $this->editEpisodeWithHttpInfo($station_id_required, $podcast_id, $id, $body);
        return $response;
    }

    /**
     * Operation editEpisodeWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $id Podcast Episode ID (required)
     * @param  \Swagger\Client\Model\ApiPodcastEpisode $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function editEpisodeWithHttpInfo($station_id_required, $podcast_id, $id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->editEpisodeRequest($station_id_required, $podcast_id, $id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editEpisodeAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $id Podcast Episode ID (required)
     * @param  \Swagger\Client\Model\ApiPodcastEpisode $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editEpisodeAsync($station_id_required, $podcast_id, $id, $body = null)
    {
        return $this->editEpisodeAsyncWithHttpInfo($station_id_required, $podcast_id, $id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editEpisodeAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $id Podcast Episode ID (required)
     * @param  \Swagger\Client\Model\ApiPodcastEpisode $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editEpisodeAsyncWithHttpInfo($station_id_required, $podcast_id, $id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->editEpisodeRequest($station_id_required, $podcast_id, $id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editEpisode'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $id Podcast Episode ID (required)
     * @param  \Swagger\Client\Model\ApiPodcastEpisode $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function editEpisodeRequest($station_id_required, $podcast_id, $id, $body = null)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling editEpisode'
            );
        }
        // verify the required parameter 'podcast_id' is set
        if ($podcast_id === null || (is_array($podcast_id) && count($podcast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $podcast_id when calling editEpisode'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling editEpisode'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{podcast_id}/episode/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($podcast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'podcast_id' . '}',
                ObjectSerializer::toPathValue($podcast_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation editPodcast
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $id Podcast ID (required)
     * @param  \Swagger\Client\Model\ApiPodcast $body body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiStatus
     */
    public function editPodcast($station_id_required, $id, $body = null)
    {
        list($response) = $this->editPodcastWithHttpInfo($station_id_required, $id, $body);
        return $response;
    }

    /**
     * Operation editPodcastWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $id Podcast ID (required)
     * @param  \Swagger\Client\Model\ApiPodcast $body (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function editPodcastWithHttpInfo($station_id_required, $id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->editPodcastRequest($station_id_required, $id, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation editPodcastAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $id Podcast ID (required)
     * @param  \Swagger\Client\Model\ApiPodcast $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editPodcastAsync($station_id_required, $id, $body = null)
    {
        return $this->editPodcastAsyncWithHttpInfo($station_id_required, $id, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation editPodcastAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $id Podcast ID (required)
     * @param  \Swagger\Client\Model\ApiPodcast $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function editPodcastAsyncWithHttpInfo($station_id_required, $id, $body = null)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->editPodcastRequest($station_id_required, $id, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'editPodcast'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $id Podcast ID (required)
     * @param  \Swagger\Client\Model\ApiPodcast $body (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function editPodcastRequest($station_id_required, $id, $body = null)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling editPodcast'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling editPodcast'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEpisode
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiPodcastEpisode
     */
    public function getEpisode($station_id_required, $podcast_id, $id)
    {
        list($response) = $this->getEpisodeWithHttpInfo($station_id_required, $podcast_id, $id);
        return $response;
    }

    /**
     * Operation getEpisodeWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiPodcastEpisode, HTTP status code, HTTP response headers (array of strings)
     */
    public function getEpisodeWithHttpInfo($station_id_required, $podcast_id, $id)
    {
        $returnType = '\Swagger\Client\Model\ApiPodcastEpisode';
        $request = $this->getEpisodeRequest($station_id_required, $podcast_id, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiPodcastEpisode',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEpisodeAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEpisodeAsync($station_id_required, $podcast_id, $id)
    {
        return $this->getEpisodeAsyncWithHttpInfo($station_id_required, $podcast_id, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEpisodeAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEpisodeAsyncWithHttpInfo($station_id_required, $podcast_id, $id)
    {
        $returnType = '\Swagger\Client\Model\ApiPodcastEpisode';
        $request = $this->getEpisodeRequest($station_id_required, $podcast_id, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEpisode'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEpisodeRequest($station_id_required, $podcast_id, $id)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling getEpisode'
            );
        }
        // verify the required parameter 'podcast_id' is set
        if ($podcast_id === null || (is_array($podcast_id) && count($podcast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $podcast_id when calling getEpisode'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getEpisode'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{podcast_id}/episode/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($podcast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'podcast_id' . '}',
                ObjectSerializer::toPathValue($podcast_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getEpisodes
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiPodcastEpisode[]
     */
    public function getEpisodes($station_id_required, $podcast_id)
    {
        list($response) = $this->getEpisodesWithHttpInfo($station_id_required, $podcast_id);
        return $response;
    }

    /**
     * Operation getEpisodesWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiPodcastEpisode[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getEpisodesWithHttpInfo($station_id_required, $podcast_id)
    {
        $returnType = '\Swagger\Client\Model\ApiPodcastEpisode[]';
        $request = $this->getEpisodesRequest($station_id_required, $podcast_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiPodcastEpisode[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getEpisodesAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEpisodesAsync($station_id_required, $podcast_id)
    {
        return $this->getEpisodesAsyncWithHttpInfo($station_id_required, $podcast_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getEpisodesAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getEpisodesAsyncWithHttpInfo($station_id_required, $podcast_id)
    {
        $returnType = '\Swagger\Client\Model\ApiPodcastEpisode[]';
        $request = $this->getEpisodesRequest($station_id_required, $podcast_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getEpisodes'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getEpisodesRequest($station_id_required, $podcast_id)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling getEpisodes'
            );
        }
        // verify the required parameter 'podcast_id' is set
        if ($podcast_id === null || (is_array($podcast_id) && count($podcast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $podcast_id when calling getEpisodes'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{podcast_id}/episodes';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($podcast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'podcast_id' . '}',
                ObjectSerializer::toPathValue($podcast_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPodcast
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $id Podcast ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiPodcast
     */
    public function getPodcast($station_id_required, $id)
    {
        list($response) = $this->getPodcastWithHttpInfo($station_id_required, $id);
        return $response;
    }

    /**
     * Operation getPodcastWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $id Podcast ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiPodcast, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPodcastWithHttpInfo($station_id_required, $id)
    {
        $returnType = '\Swagger\Client\Model\ApiPodcast';
        $request = $this->getPodcastRequest($station_id_required, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiPodcast',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPodcastAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPodcastAsync($station_id_required, $id)
    {
        return $this->getPodcastAsyncWithHttpInfo($station_id_required, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPodcastAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPodcastAsyncWithHttpInfo($station_id_required, $id)
    {
        $returnType = '\Swagger\Client\Model\ApiPodcast';
        $request = $this->getPodcastRequest($station_id_required, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPodcast'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPodcastRequest($station_id_required, $id)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling getPodcast'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getPodcast'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPodcasts
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiPodcast[]
     */
    public function getPodcasts($station_id_required)
    {
        list($response) = $this->getPodcastsWithHttpInfo($station_id_required);
        return $response;
    }

    /**
     * Operation getPodcastsWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiPodcast[], HTTP status code, HTTP response headers (array of strings)
     */
    public function getPodcastsWithHttpInfo($station_id_required)
    {
        $returnType = '\Swagger\Client\Model\ApiPodcast[]';
        $request = $this->getPodcastsRequest($station_id_required);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiPodcast[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPodcastsAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPodcastsAsync($station_id_required)
    {
        return $this->getPodcastsAsyncWithHttpInfo($station_id_required)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPodcastsAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPodcastsAsyncWithHttpInfo($station_id_required)
    {
        $returnType = '\Swagger\Client\Model\ApiPodcast[]';
        $request = $this->getPodcastsRequest($station_id_required);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPodcasts'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPodcastsRequest($station_id_required)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling getPodcasts'
            );
        }

        $resourcePath = '/station/{station_id}/podcasts';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdArtDelete
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiStatus
     */
    public function stationStationIdPodcastPodcastIdArtDelete($station_id_required, $podcast_id)
    {
        list($response) = $this->stationStationIdPodcastPodcastIdArtDeleteWithHttpInfo($station_id_required, $podcast_id);
        return $response;
    }

    /**
     * Operation stationStationIdPodcastPodcastIdArtDeleteWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function stationStationIdPodcastPodcastIdArtDeleteWithHttpInfo($station_id_required, $podcast_id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->stationStationIdPodcastPodcastIdArtDeleteRequest($station_id_required, $podcast_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stationStationIdPodcastPodcastIdArtDeleteAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdArtDeleteAsync($station_id_required, $podcast_id)
    {
        return $this->stationStationIdPodcastPodcastIdArtDeleteAsyncWithHttpInfo($station_id_required, $podcast_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdArtDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdArtDeleteAsyncWithHttpInfo($station_id_required, $podcast_id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->stationStationIdPodcastPodcastIdArtDeleteRequest($station_id_required, $podcast_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stationStationIdPodcastPodcastIdArtDelete'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stationStationIdPodcastPodcastIdArtDeleteRequest($station_id_required, $podcast_id)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling stationStationIdPodcastPodcastIdArtDelete'
            );
        }
        // verify the required parameter 'podcast_id' is set
        if ($podcast_id === null || (is_array($podcast_id) && count($podcast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $podcast_id when calling stationStationIdPodcastPodcastIdArtDelete'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{podcast_id}/art';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($podcast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'podcast_id' . '}',
                ObjectSerializer::toPathValue($podcast_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdArtGet
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function stationStationIdPodcastPodcastIdArtGet($station_id_required, $podcast_id)
    {
        $this->stationStationIdPodcastPodcastIdArtGetWithHttpInfo($station_id_required, $podcast_id);
    }

    /**
     * Operation stationStationIdPodcastPodcastIdArtGetWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function stationStationIdPodcastPodcastIdArtGetWithHttpInfo($station_id_required, $podcast_id)
    {
        $returnType = '';
        $request = $this->stationStationIdPodcastPodcastIdArtGetRequest($station_id_required, $podcast_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stationStationIdPodcastPodcastIdArtGetAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdArtGetAsync($station_id_required, $podcast_id)
    {
        return $this->stationStationIdPodcastPodcastIdArtGetAsyncWithHttpInfo($station_id_required, $podcast_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdArtGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdArtGetAsyncWithHttpInfo($station_id_required, $podcast_id)
    {
        $returnType = '';
        $request = $this->stationStationIdPodcastPodcastIdArtGetRequest($station_id_required, $podcast_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stationStationIdPodcastPodcastIdArtGet'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stationStationIdPodcastPodcastIdArtGetRequest($station_id_required, $podcast_id)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling stationStationIdPodcastPodcastIdArtGet'
            );
        }
        // verify the required parameter 'podcast_id' is set
        if ($podcast_id === null || (is_array($podcast_id) && count($podcast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $podcast_id when calling stationStationIdPodcastPodcastIdArtGet'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{podcast_id}/art';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($podcast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'podcast_id' . '}',
                ObjectSerializer::toPathValue($podcast_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdArtPost
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiStatus
     */
    public function stationStationIdPodcastPodcastIdArtPost($station_id_required, $podcast_id)
    {
        list($response) = $this->stationStationIdPodcastPodcastIdArtPostWithHttpInfo($station_id_required, $podcast_id);
        return $response;
    }

    /**
     * Operation stationStationIdPodcastPodcastIdArtPostWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function stationStationIdPodcastPodcastIdArtPostWithHttpInfo($station_id_required, $podcast_id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->stationStationIdPodcastPodcastIdArtPostRequest($station_id_required, $podcast_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stationStationIdPodcastPodcastIdArtPostAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdArtPostAsync($station_id_required, $podcast_id)
    {
        return $this->stationStationIdPodcastPodcastIdArtPostAsyncWithHttpInfo($station_id_required, $podcast_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdArtPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdArtPostAsyncWithHttpInfo($station_id_required, $podcast_id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->stationStationIdPodcastPodcastIdArtPostRequest($station_id_required, $podcast_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stationStationIdPodcastPodcastIdArtPost'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stationStationIdPodcastPodcastIdArtPostRequest($station_id_required, $podcast_id)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling stationStationIdPodcastPodcastIdArtPost'
            );
        }
        // verify the required parameter 'podcast_id' is set
        if ($podcast_id === null || (is_array($podcast_id) && count($podcast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $podcast_id when calling stationStationIdPodcastPodcastIdArtPost'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{podcast_id}/art';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($podcast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'podcast_id' . '}',
                ObjectSerializer::toPathValue($podcast_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDelete
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiStatus
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDelete($station_id_required, $podcast_id, $episode_id)
    {
        list($response) = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDeleteWithHttpInfo($station_id_required, $podcast_id, $episode_id);
        return $response;
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDeleteWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDeleteWithHttpInfo($station_id_required, $podcast_id, $episode_id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDeleteRequest($station_id_required, $podcast_id, $episode_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDeleteAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDeleteAsync($station_id_required, $podcast_id, $episode_id)
    {
        return $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDeleteAsyncWithHttpInfo($station_id_required, $podcast_id, $episode_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDeleteAsyncWithHttpInfo($station_id_required, $podcast_id, $episode_id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDeleteRequest($station_id_required, $podcast_id, $episode_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDelete'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDeleteRequest($station_id_required, $podcast_id, $episode_id)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDelete'
            );
        }
        // verify the required parameter 'podcast_id' is set
        if ($podcast_id === null || (is_array($podcast_id) && count($podcast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $podcast_id when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDelete'
            );
        }
        // verify the required parameter 'episode_id' is set
        if ($episode_id === null || (is_array($episode_id) && count($episode_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $episode_id when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtDelete'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{podcast_id}/episode/{episode_id}/art';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($podcast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'podcast_id' . '}',
                ObjectSerializer::toPathValue($podcast_id),
                $resourcePath
            );
        }
        // path params
        if ($episode_id !== null) {
            $resourcePath = str_replace(
                '{' . 'episode_id' . '}',
                ObjectSerializer::toPathValue($episode_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGet
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGet($station_id_required, $podcast_id, $episode_id)
    {
        $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGetWithHttpInfo($station_id_required, $podcast_id, $episode_id);
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGetWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGetWithHttpInfo($station_id_required, $podcast_id, $episode_id)
    {
        $returnType = '';
        $request = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGetRequest($station_id_required, $podcast_id, $episode_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGetAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGetAsync($station_id_required, $podcast_id, $episode_id)
    {
        return $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGetAsyncWithHttpInfo($station_id_required, $podcast_id, $episode_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGetAsyncWithHttpInfo($station_id_required, $podcast_id, $episode_id)
    {
        $returnType = '';
        $request = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGetRequest($station_id_required, $podcast_id, $episode_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGet'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGetRequest($station_id_required, $podcast_id, $episode_id)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGet'
            );
        }
        // verify the required parameter 'podcast_id' is set
        if ($podcast_id === null || (is_array($podcast_id) && count($podcast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $podcast_id when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGet'
            );
        }
        // verify the required parameter 'episode_id' is set
        if ($episode_id === null || (is_array($episode_id) && count($episode_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $episode_id when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtGet'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{podcast_id}/episode/{episode_id}/art';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($podcast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'podcast_id' . '}',
                ObjectSerializer::toPathValue($podcast_id),
                $resourcePath
            );
        }
        // path params
        if ($episode_id !== null) {
            $resourcePath = str_replace(
                '{' . 'episode_id' . '}',
                ObjectSerializer::toPathValue($episode_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPost
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiStatus
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPost($station_id_required, $podcast_id, $episode_id)
    {
        list($response) = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPostWithHttpInfo($station_id_required, $podcast_id, $episode_id);
        return $response;
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPostWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPostWithHttpInfo($station_id_required, $podcast_id, $episode_id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPostRequest($station_id_required, $podcast_id, $episode_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPostAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPostAsync($station_id_required, $podcast_id, $episode_id)
    {
        return $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPostAsyncWithHttpInfo($station_id_required, $podcast_id, $episode_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPostAsyncWithHttpInfo($station_id_required, $podcast_id, $episode_id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPostRequest($station_id_required, $podcast_id, $episode_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPost'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPostRequest($station_id_required, $podcast_id, $episode_id)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPost'
            );
        }
        // verify the required parameter 'podcast_id' is set
        if ($podcast_id === null || (is_array($podcast_id) && count($podcast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $podcast_id when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPost'
            );
        }
        // verify the required parameter 'episode_id' is set
        if ($episode_id === null || (is_array($episode_id) && count($episode_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $episode_id when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdArtPost'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{podcast_id}/episode/{episode_id}/art';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($podcast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'podcast_id' . '}',
                ObjectSerializer::toPathValue($podcast_id),
                $resourcePath
            );
        }
        // path params
        if ($episode_id !== null) {
            $resourcePath = str_replace(
                '{' . 'episode_id' . '}',
                ObjectSerializer::toPathValue($episode_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDelete
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiStatus
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDelete($station_id_required, $podcast_id, $episode_id)
    {
        list($response) = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDeleteWithHttpInfo($station_id_required, $podcast_id, $episode_id);
        return $response;
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDeleteWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDeleteWithHttpInfo($station_id_required, $podcast_id, $episode_id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDeleteRequest($station_id_required, $podcast_id, $episode_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDeleteAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDeleteAsync($station_id_required, $podcast_id, $episode_id)
    {
        return $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDeleteAsyncWithHttpInfo($station_id_required, $podcast_id, $episode_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDeleteAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDeleteAsyncWithHttpInfo($station_id_required, $podcast_id, $episode_id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDeleteRequest($station_id_required, $podcast_id, $episode_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDelete'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDeleteRequest($station_id_required, $podcast_id, $episode_id)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDelete'
            );
        }
        // verify the required parameter 'podcast_id' is set
        if ($podcast_id === null || (is_array($podcast_id) && count($podcast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $podcast_id when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDelete'
            );
        }
        // verify the required parameter 'episode_id' is set
        if ($episode_id === null || (is_array($episode_id) && count($episode_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $episode_id when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaDelete'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{podcast_id}/episode/{episode_id}/media';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($podcast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'podcast_id' . '}',
                ObjectSerializer::toPathValue($podcast_id),
                $resourcePath
            );
        }
        // path params
        if ($episode_id !== null) {
            $resourcePath = str_replace(
                '{' . 'episode_id' . '}',
                ObjectSerializer::toPathValue($episode_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGet
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGet($station_id_required, $podcast_id, $episode_id)
    {
        $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGetWithHttpInfo($station_id_required, $podcast_id, $episode_id);
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGetWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGetWithHttpInfo($station_id_required, $podcast_id, $episode_id)
    {
        $returnType = '';
        $request = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGetRequest($station_id_required, $podcast_id, $episode_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGetAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGetAsync($station_id_required, $podcast_id, $episode_id)
    {
        return $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGetAsyncWithHttpInfo($station_id_required, $podcast_id, $episode_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGetAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGetAsyncWithHttpInfo($station_id_required, $podcast_id, $episode_id)
    {
        $returnType = '';
        $request = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGetRequest($station_id_required, $podcast_id, $episode_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGet'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGetRequest($station_id_required, $podcast_id, $episode_id)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGet'
            );
        }
        // verify the required parameter 'podcast_id' is set
        if ($podcast_id === null || (is_array($podcast_id) && count($podcast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $podcast_id when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGet'
            );
        }
        // verify the required parameter 'episode_id' is set
        if ($episode_id === null || (is_array($episode_id) && count($episode_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $episode_id when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaGet'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{podcast_id}/episode/{episode_id}/media';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($podcast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'podcast_id' . '}',
                ObjectSerializer::toPathValue($podcast_id),
                $resourcePath
            );
        }
        // path params
        if ($episode_id !== null) {
            $resourcePath = str_replace(
                '{' . 'episode_id' . '}',
                ObjectSerializer::toPathValue($episode_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPost
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ApiStatus
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPost($station_id_required, $podcast_id, $episode_id)
    {
        list($response) = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPostWithHttpInfo($station_id_required, $podcast_id, $episode_id);
        return $response;
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPostWithHttpInfo
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ApiStatus, HTTP status code, HTTP response headers (array of strings)
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPostWithHttpInfo($station_id_required, $podcast_id, $episode_id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPostRequest($station_id_required, $podcast_id, $episode_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiStatus',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ApiError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPostAsync
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPostAsync($station_id_required, $podcast_id, $episode_id)
    {
        return $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPostAsyncWithHttpInfo($station_id_required, $podcast_id, $episode_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPostAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPostAsyncWithHttpInfo($station_id_required, $podcast_id, $episode_id)
    {
        $returnType = '\Swagger\Client\Model\ApiStatus';
        $request = $this->stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPostRequest($station_id_required, $podcast_id, $episode_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPost'
     *
     * @param  \Swagger\Client\Model\StationIdRequired $station_id_required (required)
     * @param  string $podcast_id Podcast ID (required)
     * @param  string $episode_id Podcast Episode ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPostRequest($station_id_required, $podcast_id, $episode_id)
    {
        // verify the required parameter 'station_id_required' is set
        if ($station_id_required === null || (is_array($station_id_required) && count($station_id_required) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $station_id_required when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPost'
            );
        }
        // verify the required parameter 'podcast_id' is set
        if ($podcast_id === null || (is_array($podcast_id) && count($podcast_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $podcast_id when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPost'
            );
        }
        // verify the required parameter 'episode_id' is set
        if ($episode_id === null || (is_array($episode_id) && count($episode_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $episode_id when calling stationStationIdPodcastPodcastIdEpisodeEpisodeIdMediaPost'
            );
        }

        $resourcePath = '/station/{station_id}/podcast/{podcast_id}/episode/{episode_id}/media';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($station_id_required !== null) {
            $resourcePath = str_replace(
                '{' . 'StationIdRequired' . '}',
                ObjectSerializer::toPathValue($station_id_required),
                $resourcePath
            );
        }
        // path params
        if ($podcast_id !== null) {
            $resourcePath = str_replace(
                '{' . 'podcast_id' . '}',
                ObjectSerializer::toPathValue($podcast_id),
                $resourcePath
            );
        }
        // path params
        if ($episode_id !== null) {
            $resourcePath = str_replace(
                '{' . 'episode_id' . '}',
                ObjectSerializer::toPathValue($episode_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('X-API-Key');
        if ($apiKey !== null) {
            $headers['X-API-Key'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
